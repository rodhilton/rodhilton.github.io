<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Absolutely No Machete Juggling &raquo; Programming</title>
		<description>Rod Hilton&amp;#039;s rants about stuff he cares about way too much.</description>		
		<link>http://www.nomachetejuggling.com</link>
		<atom:link href="http://www.nomachetejuggling.com/category/programming/rss.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>My Software Engineering Guiding Principles - Part 1</title>
				<description>&lt;p&gt;I find that I repeat myself often at work.  There are a handful of things I say so often when discussing decisions that I&amp;#39;ve been called out for it on occasion for acting like a broken record.&lt;/p&gt;

&lt;p&gt;But the reason I keep repeating these phrases is that I think they inform a great deal of my decision-making.  They are, in effect, my guiding principles when developing software professionally.&lt;/p&gt;

&lt;p&gt;I thought it might be fun to write a few of these things down because I think that they&amp;#39;re worth sharing - I feel like these principles have steered me in the right direction time and time again.  Obviously, there are exceptions to these and there are times when they should be ignored (after all, not being a zealot is one of the principles) but I think they will generally take an engineer down the right path.&lt;/p&gt;

&lt;h1&gt;Have Strong Opinions, Weakly Held&amp;quot;&lt;/h1&gt;

&lt;p&gt;I think the phrase I&amp;#39;ve heard more than any other in my life is &amp;quot;tell us how you really feel!&amp;quot; which is I guess people&amp;#39;s way of telling me I&amp;#39;ve made them uncomfortable by expressing an opinion too aggressively.  It&amp;#39;s true, I can be very strongly opinionated, and I&amp;#39;ve gotten into more than my fair share of, oh, let&amp;#39;s call them &amp;quot;passionate discussions&amp;quot; in the workplace.  I&amp;#39;m never insulting or personal, but I have strong opinions on how to do things.&lt;/p&gt;

&lt;p&gt;That said, I think it&amp;#39;s important to always be open to having my mind changed.  If anything, I think I&amp;#39;m TOO easy to convince to change my mind on something, often it takes only one strong counterpoint to completely demolish an opinion I&amp;#39;ve held firm to for years.  My opinions are informed by years and years of experience, but that experience doesn&amp;#39;t always apply in every situation, so it&amp;#39;s important to be willing to adjust in light of new information or facts.&lt;/p&gt;

&lt;p&gt;Apparently this phrase &amp;quot;strong opinions, weakly held&amp;quot; comes from Stanford Professor Bob Sutton.  I think it&amp;#39;s a good way to approach every opinion really.  I&amp;#39;ve switched between polar opposite positions on a number of issues, including political and philosophical issues that I won&amp;#39;t get into on this blog, but I think I do a good job of allowing my convictions of experience to be suspended to make way for alternative arguments.  &lt;strong&gt;I never assume I&amp;#39;m objectively right just because I care&lt;/strong&gt;.&lt;/p&gt;

&lt;table class='image alignright' width='306'&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://www.nomachetejuggling.com/assets/zealot.jpg&quot; width='300' height='259'/&gt;&lt;p class='caption'&gt;Unless you hunger for battle, don't be a zealot&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;It&amp;#39;s important that the thing that makes an opinion weakly held is a strong, rational, logical argument for the alternative position.  I won&amp;#39;t back down on something I think is important because of how passionately another person disagrees, or how upset it makes them that they&amp;#39;ve met opposition.  This is what makes the opinion strong: I genuinely care about believing the largest possible number of true and correct things, so the only way to dislodge a strong opinion is with true and correct things that work to counter it.&lt;/p&gt;

&lt;h2&gt;Don&amp;#39;t Be A Jerk&lt;/h2&gt;

&lt;p&gt;I cringed when I watched Season 3, Episode 6 of my favorite show Silicon Valley, as the main character Richard felt so strongly about Tabs over Spaces that he alienated everyone in his life over it.  These debates are so incredibly pointless to me, I do not understand how people waste so much time caring about them.  &lt;strong&gt;Strong opinions are not the same as zealotry&lt;/strong&gt;, zealotry is company and team poison.  Strong opinions only matter if the things they&amp;#39;re about matter.  Having extremely strong opinions about tabs vs spaces, or emacs vs vim makes you borderline un-hireable to me, bringing zealots onto your team violates the &lt;a href=&quot;https://smile.amazon.com/Asshole-Rule-Civilized-Workplace-Surviving/dp/0446698202&quot;&gt;No Asshole Rule&lt;/a&gt; (though for the record, spaces and vim, #sorrynotsorry).&lt;/p&gt;

&lt;p&gt;Additionally, it&amp;#39;s fine to have strong opinions but if you find yourself belittling or mocking other people in order to stand by them, they probably aren&amp;#39;t that strong.  Your positions on technical matters should stand on their own weight, without needing to knock people down.  Don&amp;#39;t be one of those people that walks around acting like a jerk and then justifying it by saying you have strong opinions.  The best engineers I&amp;#39;ve worked with have consistently been skilled at &lt;strong&gt;not only having well-reasoned strong opinions, but communicating those opinions respectfully to others.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span data-pullquote=&quot;It's better to have a hole in your team than an asshole. &quot; class=&quot;left&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Being a technical wizard doesn&amp;#39;t give someone the right to be a pompous ass to everyone else.  I&amp;#39;m a strong advocate of taking people who are, at a personal level, insufferable, and firing them for being a poor cultural fit, regardless of how much they know about this or that technology.  It&amp;#39;s better to have a hole in your team than an asshole.&lt;/p&gt;

&lt;p&gt;I started this list with this one in particular because it&amp;#39;s important.  The rest of this list is, essentially, a list of strongly held opinions I maintain.  But it&amp;#39;s important that even these opinions, having reaching Guiding Principle level, are subject to change in the light of strong counterarguments, or subject to suspension in light of unique circumstances.&lt;/p&gt;

&lt;h1&gt;The Team Unqualified to Refactor is Unqualified to Rewrite&lt;/h1&gt;

&lt;p&gt;I strongly, strongly believe that a full-on code rewrite is nearly always the wrong thing to do.  Either you pull everyone off the current iteration of the product to do the rewrite, which means your main product languishes, or you pull some people off to do the rewrite, meaning the rewrite team has to always be catching up with the ever-growing main product.&lt;/p&gt;

&lt;p&gt;From a simple project management standpoint, this is a disaster.  Want to know how long the rewrite will take?  Well in the former case, you&amp;#39;re working with a team that&amp;#39;s dealing with new technology and new development, so there&amp;#39;s no way to apply any previously recorded team velocity as a prediction of future performance.  Moreover, you don&amp;#39;t actually have any sense of the scope of the project, because the requirements are basically &amp;quot;everything the app does now&amp;quot;, which will include weird corner cases that have long since been forgotten.  So you have an unknown scope and an unknown team velocity, and you&amp;#39;re trying to make a prediction of when this work will be completed?  So development is going to stop on the main product line for an indeterminate amount of time.  And this is the BEST case scenario, the one where everyone can focus on doing the rewrite.&lt;/p&gt;

&lt;p&gt;In the latter case, it&amp;#39;s even more unpredictable - you still have the unknown scope issue, but it&amp;#39;s worse because you also have to include, in the scope, getting to parity with whatever else is built while the rewrite is being worked on.  If the rewrite would take 3 months, you have 3 months worth of new features on the main product to catch up to.  If it would take 6 months, you have 6 months of features to catch up on.  And since you don&amp;#39;t know how long it will take just to reach current parity, you can&amp;#39;t predict how far in the hole you&amp;#39;re going to be when it&amp;#39;s &amp;quot;done&amp;quot;, which means it adds ANOTHER layer of unknown time into the mix.  And remember, the velocity of the &amp;quot;main product&amp;quot; team will be affected by the loss of resources who peel off to do the rewrite, so you have little sense of the velocity of not one, but both teams.  If you know your car&amp;#39;s speed, you can predict when it will pass a landmark - but you can&amp;#39;t possibly know when it will pass another moving car if you don&amp;#39;t also know that car&amp;#39;s speed perfectly.  If you know neither car&amp;#39;s speed, you&amp;#39;re utterly done for.&lt;/p&gt;

&lt;table class='image alignleft' width='306'&gt;&lt;tr&gt;&lt;td&gt;&lt;a href='https://www.flickr.com/photos/8047705@N02/5463789169/in/photolist-9jPmax-9DDYgg-nuZtxE-qhFho-ejtid-6c7xeY-ze5cZ-nmKFqr-b1AcSK-9FVdCx-b1AhTZ-b1A75H-dZkGN1-nB5JZn-qhFau-2DKnb-f4N574-cBqwpb-dD7wZD-5cTVaL-zCEF8-9F679e-ogasoM-aDd8E1-9bBdFG-4LeSwt-aDd8s9-J1y1LF-aD9gKD-Curwec-8MGTB8-9cP1vZ-dfCV95-HHBNMQ-oqYWpW-CUmf1-6Skbcz-5SptQa-5qD4Md-4mtSKC-eftGLt-8P76u6-oHB4w9-F8KKsW-7pZA7u-9XRFMM-tPAFC-7xYyVJ-6YmJXf-9BVWnR'&gt;&lt;img src=&quot;http://www.nomachetejuggling.com/assets/sorry.jpg&quot; width='300' height='199'/&gt;&lt;/a&gt;&lt;p class='caption'&gt;Go back to start&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Moreover, from an engineering standpoint this is a terrible idea.  Everyone likes doing greenfield work because it&amp;#39;s new and exciting, but you have to ask, why the engineers want to avoid maintaining and refactoring the existing product?  Is the codebase such a spaghetti mess that it&amp;#39;s too difficult to add anything, so the team wants to try again from scratch?  &lt;strong&gt;Who the hell do you think made that dumpster fire in the first place?&lt;/strong&gt;  Why on earth would that same team suddenly do it right the second time around?  Especially when under the pressure of &amp;quot;we have to get caught up&amp;quot; and the time-pressure of the company&amp;#39;s primary software products being frozen or at least slowed while the team develops it?  It&amp;#39;s even MORE likely that corners will be cut and quality will suffer, not less likely.&lt;/p&gt;

&lt;p&gt;Refactoring the codebase is almost always the right way to go.  Take the awful parts that you want to rewrite and slowly but surely refactor them into the clean codebase you want.  It might take overall longer to be &amp;quot;done&amp;quot; with the effort, but the entire time it&amp;#39;s happening the main product is still in active development without the &amp;quot;two cars racing&amp;quot; situation.  Refactoring code is, though slower, also easier to do than rewriting it from scratch, because you&amp;#39;re able to do it in small steps with (hopefully) the support of a huge test suite to ensure you don&amp;#39;t break anything.  &lt;strong&gt;Since refactoring is easier than rewriting, any team that says &amp;quot;it&amp;#39;s too hard&amp;quot; to the idea of refactoring the existing codebase instead of rewriting it is inherently not good enough to do the rewrite.&lt;/strong&gt;  The end result will actually be worse.&lt;/p&gt;

&lt;h2&gt;Exceptions&lt;/h2&gt;

&lt;p&gt;There are a couple noteworthy exceptions to this.  One, when the reason for the rewrite is a complete change in technology, specifically the language of implementation.  If you&amp;#39;re working with Java and want to rewrite in Scala or Clojure, the team should be able to refactor piece by piece since it all compiles to the same bytecode.  However, if the team needs to move from a dead technology such as ColdFusion to something else like .NET, a full rewrite is the only way to go.  This may also apply in the case of using a prototyping technology to develop the first iteration of a product, only to discover that there&amp;#39;s no way to make the system scale, such as in the case of Twitter&amp;#39;s abandonment of &lt;a href=&quot;http://www.gmarwaha.com/blog/2011/04/11/twitter-moves-from-rails-to-java/&quot;&gt;Rails in favor of Scala&lt;/a&gt;.  Not every company has the resources to &lt;a href=&quot;http://readwrite.com/2010/02/02/update_facebook_rewrites_php_runtime_with_project/&quot;&gt;develop a new PHP runtime&lt;/a&gt; just to avoid rewriting their codebase in something other than PHP, sometimes you have to bite the bullet and pick different technology.&lt;/p&gt;

&lt;p&gt;Another exception is when you find yourself in an &amp;quot;over the wall&amp;quot; situation.  Perhaps a team of contractors or consultants or offshore engineers were hired to develop the first iteration of a project, and then the codebase was tossed over the wall to another team to maintain.  In this case, the new team may in fact be qualified to both refactor OR rewrite the codebase, and may simply decide the codebase as-is is too much of a mess to bother with and do a rewrite.  In this instance, I still would encourage exploring every possibly opportunity to refactor first, but believe me when I say I&amp;#39;ve been on the recieving end of these codebase bombs enough to fully appreciate that sometimes you just need to rewrite the whole thing.&lt;/p&gt;

&lt;h1&gt;Choose Boring Technology&lt;/h1&gt;

&lt;p&gt;I really can&amp;#39;t say this any better than Dan McKinley&amp;#39;s original post &lt;a href=&quot;http://mcfunley.com/choose-boring-technology&quot;&gt;Choose Boring Technology&lt;/a&gt;.  In it, McKinley argues that every team or company should start out with three innovation tokens.  You can spend these tokens whenever and however you please, but they don&amp;#39;t replenish quickly.  Every time you pick an exciting or buzzwordy or cutting edge technology instead of an old standard, you spend a token.&lt;/p&gt;

&lt;p&gt;Relational Databases are boring.  Java is boring.  JQuery is boring.  Apache is boring.  Linux is boring.  Tomcat is boring.  Choose something &amp;quot;cool&amp;quot; instead of something boring, and you&amp;#39;ve spent an innovation token.  Boring technology is boring because it&amp;#39;s &lt;em&gt;known&lt;/em&gt;, not because it&amp;#39;s &lt;em&gt;bad&lt;/em&gt;.  It&amp;#39;s failure modes are understood, and it probably has a host of libraries and support tools make it easier to live with in the long term.&lt;/p&gt;

&lt;p&gt;There&amp;#39;s nothing wrong with Java, tons of scalable applications have been built on Java, and &amp;quot;it&amp;#39;s boring&amp;quot; isn&amp;#39;t a good enough reason to choose something else.  If your team truly feels like Scala or Clojure or Erlang or whatever is the right tool for the job, by all means use it, but that&amp;#39;s one innovation token spent.  Pick MongoDB over MySQL or Oracle and you&amp;#39;ve got one left.  Any time you COULD use technology you&amp;#39;re already using (&amp;quot;our other codebase is .NET&amp;quot;) but decide to pick something new instead, you spend a token.&lt;/p&gt;

&lt;p&gt;Boring Technology is easy to pick up, easy to research, easy to debug, and frankly easy to staff for.  I&amp;#39;m sure the engineering team is happy to pad their resumes with cool buzzwords while simultaneously making themselves irreplaceable, but is that really the best thing for the product and the company?  When boring technology fails you, there are stacks of books and internet forums available to assist you - there&amp;#39;s nothing worse than the feeling of excitement you get when you search for your error message and find that someone else has had the EXACT same problem as you before, only to be followed by the crushing blow of zero replies.&lt;/p&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-slide=&quot;47&quot; data-id=&quot;454e3843ac184d3f8bcb0e4a50d3811a&quot; data-ratio=&quot;1.31113956466069&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;hr&gt;

&lt;p&gt;I&amp;#39;ve worked plenty of jobs where the team was building plan old Java Web Applications using Spring, backed by MySQL or Oracle databases and you know what?  Those products worked just fine.  Did the teams have the &lt;em&gt;most&lt;/em&gt; fun in the world writing that code?  No, probably not, but we got the job done and the products performed quite well (and were easy to fix when they didn&amp;#39;t).  At my current gig, we decided to build a 150,000-line codebase using Scala.  Scala seemed like the right tool for the job, given the particular constraints we had about scalability and throughput in the system.  I like Scala a lot, and there&amp;#39;s no doubt that we&amp;#39;ve made tremendous productivity gains by utilizing features exclusive to Scala, but if I&amp;#39;m truly honest with myself did we actually make a net productivity gain?  When you factor in time lost trying to understand confusing code, time lost by the compiler doing a &lt;a href=&quot;https://wiki.scala-lang.org/display/SIW/Overview+of+Compiler+Phases&quot;&gt;twenty-pass compilation&lt;/a&gt; (holy shit), and time lost by having to manually perform refactorings that our IDEs couldn&amp;#39;t automate due to weak tooling support, I&amp;#39;m not actually sure we came out ahead.  Especially given Java 8&amp;#39;s functional programming features, I&amp;#39;m not sure I&amp;#39;d bother picking Scala over Java 8 today, as much fun as I have working with it.&lt;/p&gt;

&lt;p&gt;Ultimately, it&amp;#39;s really not about me or how much I enjoy working with particular tools and technologies.  My job isn&amp;#39;t to write code - my job is to solve business problems, and it so happens the best tool I&amp;#39;m most competent using for that is code.  It&amp;#39;s important to stay up to speed on the latest and greatest technologies so that you as an engineer have the knowledge to know when it&amp;#39;s time to spend an innovation token, but honestly I think most of that effort should be relegated to conference attendance, reading, and personal github accounts.  Don&amp;#39;t make company decisions based on how many buzzwords you can add to your resume.&lt;/p&gt;

&lt;h2&gt;Inventing Languages&lt;/h2&gt;

&lt;p&gt;I&amp;#39;d like to add that &amp;quot;writing your own programming language&amp;quot; should be worth four innovation tokens all on its own.  If you develop an in-house programming language, you&amp;#39;d better have a staggeringly good reason.  Good programming languages are hard to write, and unless you have a number of Computer Science PhDs with specializations in Programming Language Design and Implementation on the team, chances are all you&amp;#39;re actually doing is writing an overly complex DSL.  The kind of thing whose compiler/transpiler/transliterator fails with &amp;quot;syntax error&amp;quot; in the event of a mistyped character, rather than a helpful diagnostic and a line number.  I&amp;#39;ve seen more than one company brag about how they developed their own in-house programming language to solve their ultra-complex problem space, but it&amp;#39;s okay because they open sourced it!  Yeah, that&amp;#39;ll really come in handy when I&amp;#39;m searching StackOverflow for your language and find 2 posts.&lt;/p&gt;

&lt;p&gt;Don&amp;#39;t create your own programming language.  Your language will be weak, your tools will be poor, and language support within other tools will be nonexistent.  You probably aren&amp;#39;t going to properly staff the design and support of the language you&amp;#39;ve created.  Whatever huge productivity gains you think your new language is offering your team, they&amp;#39;ll be canceled out and then some.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;99 times out of 100, a new language isn&amp;#39;t what you want to build, but a library or a framework is&lt;/strong&gt;.  By all means, develop those in house if need be (but staff their development).  Unless you&amp;#39;re developing a language as part of your core business, like Apple developing Swift, don&amp;#39;t do it.&lt;/p&gt;

&lt;h1&gt;Will You Understand This at 3AM?&lt;/h1&gt;

&lt;p&gt;Frequently John Carmack is cited as an example of an eccentric genius, the kind of guy who is way ahead of his time.  I have to admit, I&amp;#39;m also in awe of a great deal of what he&amp;#39;s done with code.  Take this square root function he wrote for Quake III arena:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;float Q_rsqrt( float number )
{
    long i;
    float x2, y;
    const float threehalfs = 1.5F;

    x2 = number * 0.5F;
    y  = number;
    i  = * ( long * ) &amp;amp;y;                       // evil floating point bit level hacking
    i  = 0x5f3759df - ( i &amp;gt;&amp;gt; 1 );               // what the fuck? 
    y  = * ( float * ) &amp;amp;i;
    y  = y * ( threehalfs - ( x2 * y * y ) );   // 1st iteration
//  y  = y * ( threehalfs - ( x2 * y * y ) );   // 2nd iteration, this can be removed

    return y;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But notice line 10, &lt;code&gt;i  = 0x5f3759df - ( i &amp;gt;&amp;gt; 1 );&lt;/code&gt;?  It&amp;#39;s easy to find, because it&amp;#39;s helpfully annotated with a helpful &lt;code&gt;what the fuck?&lt;/code&gt; comment.  There&amp;#39;s no doubt that this code is extremely clever, and it&amp;#39;s beyond question that it&amp;#39;s extremely fast.  It also requires an entire &lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_inverse_square_root&quot;&gt;2000-word Wikipedia article&lt;/a&gt; to understand.&lt;/p&gt;

&lt;p&gt;In fact, Carmack himself wasn&amp;#39;t even the creator of this bit of wizardry, it came from Terje Mathisen, an assembly programmer who had contributed it to id Software previously.  And in fact, he likely got it from another developer, who had gotten it from someone else.  This is why the comment &lt;code&gt;what the fuck?&lt;/code&gt; is right there - nobody understood it.  And yet there it was, pasted into the Quake III engine code because it seemed to work and it was fast.  Obviously this worked out for id, and &lt;a href=&quot;https://www.youtube.com/watch?v=PcbpIntnG8c&quot;&gt;Quake III is awesome&lt;/a&gt;, but it probably wasn&amp;#39;t the wisest idea to stake their company&amp;#39;s product on code that nobody understood.&lt;/p&gt;

&lt;p&gt;Was it clever?  Absolutely.  &lt;strong&gt;But &lt;a href=&quot;https://simpleprogrammer.com/2015/03/16/11-rules-all-programmers-should-live-by/&quot;&gt;clever is the enemy of clear&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I try not to ever write comments in my code.  Comments should never be used to explain how something works, that should be apparent from the code itself.  And if that means adding a few temporary variables so that their names can be helpful (or inspected while debugging), or having some comically long method names, so be it.  Often people say that comments can be used to explain &amp;quot;why&amp;quot; something works instead, but frankly I find that a few unit tests for the code in question will do a better job of explaining the why than a comment ever could - at the very least, take the comment you&amp;#39;d write explaining why and make it the name of the test.  &lt;strong&gt;Code is for &lt;em&gt;what&lt;/em&gt;, tests are for &lt;em&gt;why&lt;/em&gt;.  Comments are for jokes.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Obviously it&amp;#39;s difficult not to be proud of yourself when you&amp;#39;ve gotten some long method down to a one-liner (even if it is one incredibly long line) or invented some massively clever solution to a problem.  And indeed, sometimes these clever tricks really are necessary to get the required performance out of a system (as in the Quake III square root example).  That&amp;#39;s why I&amp;#39;ve found this heuristic so handy (hattip to &lt;a href=&quot;http://neidetcher.com/&quot;&gt;Demian Neidetcher&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If your cell phone rings at 3AM because this code causes a production outage a year from now, will you be able to understand and reason about the code enough well enough to fix it?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Imagine that your job is basically on the line here, you&amp;#39;re now in a conference call with your boss, your boss&amp;#39;s boss, your boss&amp;#39;s boss&amp;#39;s boss, and the CTO.  Hell, maybe the CEO is on talking about the millions of dollars in lost revenue every minute the product is offline.  Your heart is racing from being startled awake, and your eyes are barely able to focus enough to read your laptop screen.  Do you &lt;em&gt;really&lt;/em&gt; want this to be what comes into focus in the middle of the night?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(n: Int) =&amp;gt; (2 to n) |&amp;gt; (
    r =&amp;gt; r.foldLeft(r.toSet)((ps, x) =&amp;gt; 
        if (ps(x)) ps -- (x * x to n by x) else ps)
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yes it&amp;#39;s clever, yes it&amp;#39;s fast, congratulations on how smart you are.  But your company code repository isn&amp;#39;t the place to show off your l33t coding ski11z, do that shit in your personal github account.  You&amp;#39;re not being paid to fluff your e-peen, you&amp;#39;re being paid to solve the company&amp;#39;s business problems, and that means writing something that can be understood by the other people they hired.  Code&amp;#39;s primary purpose is to be read by other human beings, otherwise we&amp;#39;d all be writing directly in machine language.  So if this future version of yourself won&amp;#39;t understand the code just from being tired, what chance does the dumbest person on your team have of understanding it?  Stop showing off, your job may someday depend on it.&lt;/p&gt;

&lt;h1&gt;Deliver Working Software Early and Often&lt;/h1&gt;

&lt;p&gt;I realize this is just a rewording of a standard part of the &lt;a href=&quot;http://www.agilemanifesto.org/&quot;&gt;Agile Manifesto&lt;/a&gt;, and I could just as easily say &amp;quot;Be Agile!&amp;quot; here.  But I think the truth is Agile has come to mean a lot of different things to a lot of different people, and has become a term so overloaded and hijacked that it&amp;#39;s effectively become &lt;a href=&quot;https://pragdave.me/blog/2014/03/04/time-to-kill-agile/&quot;&gt;useless as a phrase&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I like most of the ideas of the Agile Manifesto, but I think the most important thing to take away from it is the unparalleled value of getting working software into the hands of users as quickly and frequently as possible.  I absolutely detest when features are held back so that they can be released in a &amp;quot;big bang&amp;quot; to really wow and excite users (hey Product Owners, your users really don&amp;#39;t give as much of a shit as you think).  As long as a feature actually works end to end, get it into the hands of users and solicit feedback right away, every day you keep working code behind a gate is a day you give your competitors to steal users away from you.  It&amp;#39;s also a day that you are effectively lying to your users - the most important people to your software - about what your product is capable of doing.  &lt;/p&gt;

&lt;p&gt;I despise long-running feature branches in version control as well, almost any time you want to make a branch I think it&amp;#39;s better to make a feature flag that people (specifically, product owners) can turn on and off at will.  Long-running branches are incredibly susceptible to &lt;a href=&quot;https://en.wikipedia.org/wiki/Ninety-ninety_rule&quot;&gt;the 90/90 rule&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;Every &amp;quot;big bang&amp;quot; release I&amp;#39;ve been a (reluctant) part of has ended in some form of failure.  People think that the software is mostly done and then the effort spins its wheels at the end, trying to &amp;quot;harden&amp;quot; the release and remove bugs.  Or the software is finally delivered only to discover that &lt;a href=&quot;https://en.wikipedia.org/wiki/Pareto_principle&quot;&gt;80% of the users are only using 20% of the features&lt;/a&gt;, meaning that a more targeted, earlier release of those top 20% features would have been a far better use of engineering time and resources.&lt;/p&gt;

&lt;h2&gt;Plans are The Opposite of Working Software&lt;/h2&gt;

&lt;p&gt;I think a corollary to this rule is, don&amp;#39;t sell your users on non-working software.  I really hate the tendency for &amp;quot;marketing&amp;quot; to &lt;em&gt;need&lt;/em&gt; delivery dates on software features so that they can start selling the features now, a situation I&amp;#39;ve seen at company after company.  Don&amp;#39;t try to sell users on features you plan on delivering, even if you&amp;#39;re nearly certain about when those features will be done (but, hint, you&amp;#39;re probably less certain than you think).  That&amp;#39;s selling vaporware, anything can change between now and then causing those features to be shelved or to not work properly.  Instead, deliver working software early and often, and let the marketing folks sell users on what features are actually &lt;em&gt;done&lt;/em&gt;, because more stuff will actually &lt;em&gt;be&lt;/em&gt; done due to the team not wasting tons of time coming up with estimates (&lt;a href=&quot;https://www.happybearsoftware.com/all-estimates-are-still-lies&quot;&gt;read: lies&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Just start referring to “estimates” as lies.&lt;br&gt;&lt;br&gt;“how long will that take?”&lt;br&gt;“well, if I had to lie, a week?”&lt;/p&gt;&amp;mdash; Trek Glowacki (@trek) &lt;a href=&quot;https://twitter.com/trek/status/636286667087851520&quot;&gt;August 25, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Obviously sometimes there are occasions where people need some sense of how long something will take, most notably when the company is deciding between two different features to implement and they&amp;#39;re performing an analysis based on their cost (though in my experience, rarely does this happen and usually both features are requested anyway).  But for the most part, using some roadmap or a plan to inform the company on how to sell their products is a mistake - give engineers the time to properly implement features well, and then when the features are done sell people on them.  And remember, &lt;a href=&quot;http://www.bloomberg.com/news/articles/2016-05-18/this-5-billion-software-company-has-no-sales-staff&quot;&gt;good software sells itself&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Part 2...&lt;/h1&gt;

&lt;p&gt;I split this list into two posts for really no good reason aside from length.  I&amp;#39;ll be posting the other half of my Top 10 shortly.&lt;/p&gt;
</description>
				<pubDate>Wed, 15 Jun 2016 00:00:00 -0400</pubDate>
				<link>http://www.nomachetejuggling.com/2016/06/15/guidingprinciples-part1/</link>
				<guid isPermaLink="true">http://www.nomachetejuggling.com/2016/06/15/guidingprinciples-part1/</guid>
			</item>
		
			<item>
				<title>Testing Against Template Renders in Grails</title>
				<description>&lt;p&gt;I work with Grails a lot and while I really enjoy it for the most part, there are definitely some weird quirks of the framework.&lt;/p&gt;

&lt;p&gt;One such quirk is something I encounter whenever I want to write unit tests against grails controller methods that render out templates directly.  This isn&amp;#39;t something I do very often - generally I prefer rendering out JSON and parsing it with client-JS - but in some cases when there&amp;#39;s a lot of markup for a page element that you want to be updateable via ajax, it makes sense to render out a template like &lt;code&gt;render(template: &amp;#39;somePartial&amp;#39;)&lt;/code&gt; directly from a controller method.&lt;/p&gt;

&lt;p&gt;Unfortunately, these kinds of methods are very difficult to write tests against.  While a normal render exposes a &lt;code&gt;model&lt;/code&gt; and &lt;code&gt;view&lt;/code&gt; variable that you can test against, for some reason using a render with a template doesn&amp;#39;t seem to do this.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve seen lots of solutions where you stuff a fake string matching the name of the template using some metaclass wizardry, but then you&amp;#39;re stuck dealing with some semi-view stuff in what you might want to simply be a unit test about the model values placed by the controller method.&lt;/p&gt;

&lt;p&gt;However, based on &lt;a href=&quot;http://stackoverflow.com/questions/15141319/grails-controller-test-making-assertions-about-model-when-rendering-a-template&quot;&gt;this StackOverflow post&lt;/a&gt;, I&amp;#39;ve written a quick-and-dirty little monkeypatch that exposes the &lt;code&gt;model&lt;/code&gt; and &lt;code&gt;view&lt;/code&gt; variables in your test, and populated with the values relevant to the template.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve got this method in a &lt;code&gt;TestUtil&lt;/code&gt; class:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;static def ensureModelForTemplates(con) {
    def originalMethod = con.metaClass.getMetaMethod('render', [Map] as Class[])
    con.metaClass.render = { Map args -&amp;gt;
        if (args[&amp;quot;template&amp;quot;]) {
            con.modelAndView = new ModelAndView(
                args[&amp;quot;template&amp;quot;] as String, 
                args[&amp;quot;model&amp;quot;] as Map
            )
        }
        originalMethod.invoke(delegate, args)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then I can call this method with the controller as a parameter anywhere before I invoke the controller action.  It can go in a &lt;code&gt;setup&lt;/code&gt; or &lt;code&gt;@Before&lt;/code&gt; method, it seems to work from both Spock tests and the builtin Grails testing framework.&lt;/p&gt;

&lt;p&gt;So if we have this example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;class ExampleController {

    def index() {
        def bigName = params.name.toUpperCase()

        render(template: &amp;quot;partial&amp;quot;, model: [
            one: &amp;quot;hello&amp;quot;,
            two: bigName
        ])
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This test will do what we want:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;@TestFor(ExampleController)
class ExampleControllerSpec extends Specification {

    def setup() {
        TestUtil.ensureModelForTemplates(controller)
    }

    def shouldHaveModelAndViewExposed() {
        given:
        params.name = &amp;quot;Rod&amp;quot;

        when:
        controller.index()

        then:
        view == &amp;quot;partial&amp;quot;
        model.one == &amp;quot;hello&amp;quot;
        model.two == &amp;quot;ROD&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
				<pubDate>Thu, 27 Aug 2015 00:00:00 -0400</pubDate>
				<link>http://www.nomachetejuggling.com/2015/08/27/testing-against-template-renders-in-grails/</link>
				<guid isPermaLink="true">http://www.nomachetejuggling.com/2015/08/27/testing-against-template-renders-in-grails/</guid>
			</item>
		
			<item>
				<title>QCon New York 2015: A Review</title>
				<description>&lt;p&gt;My default yearly conference, for many years, has been &lt;a href=&quot;http://uberconf.com/conference/denver/2015/07/home&quot;&gt;UberConf&lt;/a&gt;.  I really enjoy UberConf because it&amp;#39;s packed full of lots of great sessions, and it&amp;#39;s conveniently local.  However, because I go to various local user groups and attend so often, I find that, if I go two years in a row there are too many sessions I&amp;#39;ve seen before, and I wind up disappointed.  So for the past few years, I&amp;#39;ve been alternating between UberConf and something new.  Two years ago, it was &lt;a href=&quot;http://www.nomachetejuggling.com/2013/07/30/oscon-2013-a-review/&quot;&gt;OSCON&lt;/a&gt;, and this year it was &lt;a href=&quot;https://qconnewyork.com/&quot;&gt;QCon New York&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I chose QCon for a few reasons.  One, the sessions seemed very focused on architecture and higher-level concepts, with very few language/technology talks.  This was right up my alley because, while there are some languages and tools I&amp;#39;d like to go deeper on, I think a more significant area for improvement for me is architecture and scalability.  We get tons of traffic at my job - more than any other place I&amp;#39;ve ever worked - so I&amp;#39;ve had to learn a lot about scalability, and the nature of the work has forced me to really see broad system design differently.&lt;/p&gt;

&lt;p&gt;I went to QCon specifically wanting to improve some areas where I was weak, namely containerization, microservices, and reactive programming.  I hear a lot of buzz about these things, and they pop up on recent &lt;a href=&quot;http://www.thoughtworks.com/radar/a-z&quot;&gt;ThoughtWorks Technology Radar&lt;/a&gt;s, and QCon seemed to have a lot of sessions to offer in these areas.  It took a LOT of convincing to get my employer to agree to send me to a conference location as expensive as New York, but eventually they approved it.  Here I will detail some of my thoughts about the experience, in case it may be of use to others considering QCon.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1&gt;Sessions&lt;/h1&gt;

&lt;p&gt;First and foremost, the sessions.  Networking isn&amp;#39;t my thing, I&amp;#39;m all about the quality, quantity, and variety of sessions offered.  &lt;strong&gt;I picked QCon based on the sessions, and I was not disappointed.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The sessions were well-arranged into tracks, as is common with these kinds of conferences.  What was somewhat different about QCon, at least from my perspective, was how cohesive sessions were within a track, and how diverse the tracks themselves were.  A lot of times tracks are really general, like &amp;quot;Java&amp;quot; or &amp;quot;Agile&amp;quot;, or they can be too similar to each other.  In QCon&amp;#39;s case, all of the tracks themselves were very different, but very specific, like &amp;quot;Fraud Detection and Hack Prevention&amp;quot; and &amp;quot;High Performance Streaming Data&amp;quot;.  Within a track, all of the talks were very closely related, and it actually made sense to pick a track and stick with it, rather than buffet style picking-and-choosing based on session alone.&lt;/p&gt;

&lt;p&gt;The sessions were the perfect length.  I&amp;#39;ve complained before that UberConf&amp;#39;s 90 minute sessions can sometimes seem overlong or padded, and that OSCON&amp;#39;s 30-minute sessions seemed rushed or abbreviated right when they were getting good, but QCon strikes a great balance at 50 minutes each.  This is short enough to prevent topic fatigue, but long enough to go in depth.  Speakers usually did a great job of giving a presentation in-line with the topic title and description as well, which is (somewhat surprisingly) rare for tech conferences.&lt;/p&gt;

&lt;p&gt;One complaint is that &lt;strong&gt;slides were usually made available AFTER sessions were over&lt;/strong&gt;.  I hate when this happens, I want to see slides ahead of time, both because I can use them to make sure the content is going to be interesting, and because I use Evernote to actually take notes IN the PDF itself, highlighting or marking up the document with my own notes.  The only argument I can imagine for why slides would be held off until after a presentation is that speakers might be modifying the slides until just before they give a talk, but frankly I think that stinks of unpreparedness.  Slides should be available in advance, no exceptions.&lt;/p&gt;

&lt;p&gt;One excellent feature of QCon was that almost all of the talks were published in video form after the sessions were over (usually late at night or the next day).  The recording quality was excellent, full video of the speaker and their slides synced up, and actual cameramen that kept the speaker in frame for the whole talk.  Audio quality was excellent as well.  UberConf does something similar by making audio-only available, but sometimes speakers forget to press record, and I often found myself skipping some sessions with the intent to listen to them on audio later, only to find that they weren&amp;#39;t recorded.  QCon solves this problem entirely with a professional A/V staff and quick editing/uploading.  What&amp;#39;s more, the slides are available when the video is - &lt;strong&gt;I actually found myself more easily able to take notes on the recorded talks than I was able to when watching talks live.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I learned a whole bunch from the sessions I went to, though there was a day (Thursday) where I narrowed down to two talks for every time slot, only to find out based on Twitter that the session I &lt;em&gt;didn&amp;#39;t&lt;/em&gt; choose was the better one.  This was annoying, but I fixed it with the video recordings.&lt;/p&gt;

&lt;p&gt;I also really liked there being a special &amp;quot;Modern Computer Science in the Real World&amp;quot; track - it&amp;#39;s rare to see really heavy CS stuff at programmer conferences, I liked it.&lt;/p&gt;

&lt;table class='image aligncenter' width='646'&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://www.nomachetejuggling.com/assets/qcon_sessions.jpg&quot; width='640' height='427'/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2&gt;Mini-Talks&lt;/h2&gt;

&lt;p&gt;On Wednesday, each of the tracks had a session which was &amp;quot;mini-talks&amp;quot;, kind of a series of lightning talks related to the track.  I really, really love lightning talks, I have found that there are a lot of 40-50 minute talks that really should just be 5 or 10 minute lightning talks, and they&amp;#39;re a great way to get wide exposure on a lot of different topics.&lt;/p&gt;

&lt;p&gt;I wish QCon had done a mini-talks session for every track, rather than just the tracks on the first day of the conference, because &lt;strong&gt;the mini-talks were great&lt;/strong&gt;.  Again, the video recordings were instrumental here, it was extremely tough to decide which mini-talks to attend, and with the help of video I was able to attend all of them.&lt;/p&gt;

&lt;h2&gt;Open Spaces&lt;/h2&gt;

&lt;p&gt;QCon also has an &amp;quot;Open Space&amp;quot; slot for each track, where attendees would get together and brainstorm their own topics, then other attendees would speak about them if they knew anything about the topic.&lt;/p&gt;

&lt;p&gt;I hate these things, I typically find that they either fizzle out due to not enough participation, or get completely controlled by a single enthusiastic person.  I guess a lot of people like Open Spaces, but they just aren&amp;#39;t for me.  Every time I saw an Open Spaces talk on the schedule, I wished it was another session, or a session of mini-talks.&lt;/p&gt;

&lt;h1&gt;Workshops&lt;/h1&gt;

&lt;p&gt;Like a lot of other conferences, QCon had two days of workshops.  Workshops can be really hit or miss in my experience (usually miss), and QCon was no exception.  One way QCon did a good job was that Monday was for all-day workshops, and Tuesday was for two half-day workshops (though they had some all-day ones as well).  This is a good way to go, personally &lt;strong&gt;I&amp;#39;ve found half-day workshops tend to work better than the all-day variety&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The workshop I picked for Monday wound up being entirely not what was I expecting.  It was extremely academic and not very hands-on, which is about the greatest sin a &amp;quot;workshop&amp;quot; can commit.  If every participant isn&amp;#39;t on their laptop, it&amp;#39;s not a workshop, it&amp;#39;s just an all-day lecture.  QCon was particularly strict about not allowing you to change workshops after making selections, so I was stuck in the workshop the whole day, hating it.&lt;/p&gt;

&lt;p&gt;The two half-day workshops were much better, but again they suffered from the problem so many workshops have, which is &lt;strong&gt;catering to the slowest, least prepared people in the workshop&lt;/strong&gt;.  I&amp;#39;ve said it before but if you ignore the e-mail that goes out with the instructions to get set up, you should be left behind.  Read the e-mails and do the setup, if you can&amp;#39;t do that then you deserve to have your money wasted; the alternative is that everything slows down so you can catch up meaning everyone else&amp;#39;s money is wasted instead.&lt;/p&gt;

&lt;p&gt;I especially want to call out &lt;a href=&quot;https://twitter.com/everett_toews&quot;&gt;Everett Toews&lt;/a&gt; for doing an excellent job with his OpenStack half-way workshop.  He had a bunch of helpers who got the slower people set up without having to slow down himself, and overall the workshop got a lot accomplished and taught me a lot about OpenStack.  I think the session occasionally devolved into &amp;quot;here, copy and paste these commands&amp;quot; lacking explanation, but for the most part the entire workshop was great, and &lt;strong&gt;easily a highlight of the conference for me&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;Keynotes&lt;/h1&gt;

&lt;p&gt;I tend to expect Keynotes to be extremely non-technical technical talks.  Like a talk that you might find scheduled normally, except watered down to a point where every audience member would be okay choosing it.  These usually mean I&amp;#39;m not a fan of them.&lt;/p&gt;

&lt;p&gt;OSCON had an interesting approach to the Keynote, which was a series of short keynotes, almost lightning-talk style, which I really liked.  QCon didn&amp;#39;t do this, but they actually managed to avoid the &amp;quot;technical talks with no technical information&amp;quot; by having legitimate technical talks, pretty in-depth from a technical standpoint.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mary Poppendieck&amp;#39;s Microchips to Microservices keynote was fantastic, as was Todd Montgomery and Trisha Gee&amp;#39;s less technical but still highly enjoyable &amp;quot;How Did We End Up Here?&amp;quot; talk&lt;/strong&gt;.  I disagreed with a lot of points that Todd and Trisha made, but their talk gave me a lot to think about, which is always fun.&lt;/p&gt;

&lt;p&gt;I wasn&amp;#39;t a big fan of &amp;quot;Driven to Distraction&amp;quot; which was a talk about the different kinds of &amp;quot;X-Driven-Development&amp;quot; there are.  This was largely intended to be a comedy talk, rather than a technical talk, and it closed the day rather than opened it.  I wasn&amp;#39;t a fan of the humor, honestly.  A little into the talk, I realized he was literally going to the entire alphabet, ADD, BDD, CDD, DDD, EDD, and so on.  Some letters got multiple definitions, I think I gave up and left around GDD (&amp;quot;Google Driven Development&amp;quot;, because we Google things, har).  Kind of ended the conference on a sour note, but something skippable at the end is nice in case your brain is fried, as mine was.&lt;/p&gt;

&lt;h1&gt;Expo Hall&lt;/h1&gt;

&lt;p&gt;Like OSCON, QCon had an area for vendors promoting their products and giving stuff away.  This room was much smaller than OSCON&amp;#39;s, but it wasn&amp;#39;t off to the side.  In fact, you had to walk through to get to 3 of the salons with regular talks, which was somewhat annoying.  However, the vendors themselves were a lot less pushy, and only tried to talk to you if you came directly to their book and initiated conversation.  They also let you go more easily once you indicated you wanted to move on.&lt;/p&gt;

&lt;p&gt;I can&amp;#39;t complain much about the vendor room, they gave cool stuff away and getting your nametag scanned for the low low price of being pestered via e-mail later on earned you a spot in a drawing.  There were enough giveaways that your chances were fairly decent, in fact I won a Lego Mindstorm set.&lt;/p&gt;

&lt;table class='image aligncenter' width='646'&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://www.nomachetejuggling.com/assets/qcon_haul.jpg&quot; width='640' height='360'/&gt;&lt;p class='caption'&gt;Swag!&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I still think the coolest version of this I&amp;#39;ve ever seen is at OSCON, where the Expo Hall was gigantic and had all sorts of interesting stuff in it, with a lot of demos and products (even a car).  QCon&amp;#39;s room being so much smaller meant that you could go see every booth in just a few minutes, but then were stuck going through the same room multiple times throughout the conference.  It also could get extremely crowded in the room, with both booth traffic and just-passing-through traffic, which discouraged me from wanting to spend much time booth hopping.&lt;/p&gt;

&lt;h1&gt;Attendees&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;I really liked the class of people at QCon, it seemed like mostly seasoned veterans in the world of software engineering&lt;/strong&gt;.  There weren&amp;#39;t a lot of young hipsters or brogrammers or anything like that, it seemed like a lot of graybeards.  I&amp;#39;m a fan of that, I think our industry generally undervalues people that have been in the field for a while, so it was nice to see such a seasoned group.&lt;/p&gt;

&lt;p&gt;Of course, I mostly avoided talking to people because I hate networking, so I can&amp;#39;t say much more than that.  All I can say is I didn&amp;#39;t overhear conversations that made me cringe with people saying dumb shit like &amp;quot;what&amp;#39;s the big deal with functional programming, I&amp;#39;ve been using C++ for years and it&amp;#39;s fine&amp;quot; (a real thing I heard at a conference once).  So it seemed like a brighter group of people overall than I&amp;#39;ve seen at some other conferences.&lt;/p&gt;

&lt;p&gt;One thing I will say, I really liked how QCon set up their lunch tables.  Lunch is typically when most of the socializing happens, and OSCON for example has tables for people with similar interests to meet and mingle.  QCon had a similar setup, but I appreciated that they also had a handful of rectangular tables pushed against the walls on the perimeter of the lunchroom.  A clear set of &amp;quot;I don&amp;#39;t want to mingle&amp;quot; tables.  Good stuff if you hate chit-chat like I do.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Just ran into stranger at &lt;a href=&quot;https://twitter.com/hashtag/qconnewyork?src=hash&quot;&gt;#qconnewyork&lt;/a&gt; who recognized my name from my badge because he follows me on Twitter and doesn&amp;#39;t know why. &lt;a href=&quot;https://twitter.com/hashtag/surreal?src=hash&quot;&gt;#surreal&lt;/a&gt;&lt;/p&gt;&amp;mdash; Rod Hilton (@rodhilton) &lt;a href=&quot;https://twitter.com/rodhilton/status/608641289379262464&quot;&gt;June 10, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h1&gt;Venue&lt;/h1&gt;

&lt;p&gt;Alright, here&amp;#39;s the bad news.  The conference was held at the New York Marriott at the Brooklyn Bridge, and &lt;strong&gt;the venue was easily my biggest complaint about the entire conference&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The hotel itself had absolutely no restaurant (or bar for that matter), which made meals a bit difficult.  What the Marriott had was a lounge that you could pay to access for $75 per day, which is outrageous.  The lounge was the only place to get a meal or a drink in the entire building, and there was no room service offered.&lt;/p&gt;

&lt;p&gt;Normally only dinners would be a problem in this type of situation, since conferences usually include breakfast and lunch.  However, what passed for &amp;#39;Breakfast&amp;#39; was extremely disappointing - 100% pastries and breads, no eggs or meat or protein of any kind (actually they did have bland, ice cold poached eggs).  Nothing served warm or even warmable (bagels, no toaster).  A bunch of pastries and muffins are not &amp;quot;brain food&amp;quot; - starting a full day of technical talks with a bunch of muffins is a surefire way to be nodding off by the third talk.  I wound up walking to a nearby Panera every single morning to get an egg sandwich.&lt;/p&gt;

&lt;p&gt;Lunch was better, but also not great.  I think by choice of QCon itself, the hotel catering had to make everything gluten-free.  I find the whole gluten-free for non-celiacs fad &lt;a href=&quot;http://www.georgeinstitute.org.au/media-releases/dont-believe-the-hype-on-gluten-free-food&quot;&gt;generally irritating&lt;/a&gt; but what really made this annoying was what foods they chose to serve.  If I say to you &amp;quot;okay we need a vegetarian meal&amp;quot; you try to think of foods that don&amp;#39;t involve meat, you don&amp;#39;t immediately think of a meat dish and substitute tofu in.  Similarly, why does your &amp;#39;gluten free&amp;#39; menu consist almost entirely of gluten-free pasta?  I wound up grabbing lunch elsewhere for 3 of the 5 days I was at the conference.  This was frustrating, because I convinced my employer to send me to NY by arguing that meals were mostly included, but then I wound up having to pay for most meals.&lt;/p&gt;

&lt;p&gt;Aside from workshops, it was very rare to find tables in the sessions - usually it was just rows of seats.  And the walls were those sliding accordion walls that hotels use to divide huge rooms into sections.  The end result being, it was very hard to find a place to plug in a laptop, and situate it in a way to take notes.  This isn&amp;#39;t really the venue&amp;#39;s fault, I&amp;#39;m sure QCon told them no tables, but it&amp;#39;s always something that irks me as a notetaker.  Like I mentioned earlier, I actually found it easier to take notes and watch sessions from the video recordings, from the comfort of my hotel room after hours.&lt;/p&gt;

&lt;h1&gt;Misc&lt;/h1&gt;

&lt;p&gt;In summary, QCon absolutely excelled in terms of session quality, variety, and depth, but workshops were an area for improvement (as with every other conference that offers them), and the venue itself was dreadful.&lt;/p&gt;

&lt;p&gt;I learned a lot at the conference, and was able to gain a lot of insight in the areas where I was hoping to.  One particular interesting note was, I went to a lot of &amp;quot;microservices&amp;quot; talks, but almost all of them were &amp;quot;here are some tips for your microservices&amp;quot; and not &amp;quot;here are pros and cons of microservices&amp;quot; or &amp;quot;why you should use microservices&amp;quot;.  In other words, most of the microservices talks assumed that you were already building and deploying microservices.  This was somewhat shocking to me and made me feel behind the curve a bit - I&amp;#39;m really not sold on microservices, I think the operational concerns are likely to outweigh the benefits, so it was interesting to see it presented like that ship has already sailed.  There was a talk by StackOverflow in favor of monoliths, but everything else was all microservices all the time.  Martin Fowler recently published a great &lt;a href=&quot;http://martinfowler.com/articles/microservice-trade-offs.html&quot;&gt;pros-and-cons of Microservices article&lt;/a&gt; that I found myself nodding along to.&lt;/p&gt;

&lt;p&gt;QCon had a nice &amp;#39;custom schedule&amp;#39; builder like OSCON but QCon&amp;#39;s was a bit behind, it didn&amp;#39;t integrate with an app and give notifications like OSCON&amp;#39;s did.  However, the full video recordings of sessions available same day were phenomenal, and the ability to share with 10 other people who didn&amp;#39;t attend the conference is awesome.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Overall, I really enjoyed my QCon experience and it&amp;#39;s definitely on my radar for a conference to attend again in the future&lt;/strong&gt;.  However, most of the things I disliked about the conference were related to its physical location and venue, which makes me wonder if it&amp;#39;s worth the (very high) price tag since the best part (the recorded sessions) are eventually made available on the internet.&lt;/p&gt;
</description>
				<pubDate>Wed, 01 Jul 2015 00:00:00 -0400</pubDate>
				<link>http://www.nomachetejuggling.com/2015/07/01/qconny-2015-a-review/</link>
				<guid isPermaLink="true">http://www.nomachetejuggling.com/2015/07/01/qconny-2015-a-review/</guid>
			</item>
		
			<item>
				<title>Uploading a Jekyll Site to Rackspace Cloudfiles</title>
				<description>&lt;p&gt;This blog was never intended to be popular by any stretch of the imagination.  Largely I started it simply to have a place to gather solutions to technical problems I&amp;#39;ve encountered, so that I could easily look those solutions up if I needed them again.  The blog has always run on my own shared hosting server, on a self-installed version of Wordpress.&lt;/p&gt;

&lt;p&gt;To my great surprise, a &lt;a href=&quot;http://www.reddit.com/r/programming/comments/2986e4/the_worst_programming_interview_question/&quot;&gt;few&lt;/a&gt; &lt;a href=&quot;http://www.reddit.com/r/programming/comments/hn1fx/a_different_kind_of_technical_interview/&quot;&gt;of&lt;/a&gt; &lt;a href=&quot;http://www.reddit.com/r/programming/comments/yvr9/my_interview_with_google/&quot;&gt;my&lt;/a&gt; &lt;a href=&quot;http://www.reddit.com/r/TrueReddit/comments/q98ld/the_star_wars_saga_suggested_viewing_order_iv_v/&quot;&gt;posts&lt;/a&gt; have found their way to the front page of &lt;a href=&quot;http://www.reddit.com/domain/nomachetejuggling.com&quot;&gt;reddit&lt;/a&gt;.  My &lt;a href=&quot;http://www.nomachetejuggling.com/2011/11/11/the-star-wars-saga-suggested-viewing-order/&quot;&gt;post about Star Wars&lt;/a&gt; has been mentioned on &lt;a href=&quot;https://www.youtube.com/watch?v=effD1u4oCRE&quot;&gt;King of the Nerds&lt;/a&gt; and &lt;a href=&quot;https://www.youtube.com/watch?v=keSFjjhUyVA&quot;&gt;The Big Bang Theory&lt;/a&gt;, and even landed me an &lt;a href=&quot;http://www.npr.org/2014/03/20/291977042/theres-more-than-one-way-to-watch-star-wars&quot;&gt;Interview on NPR&lt;/a&gt;.  &lt;/p&gt;

&lt;table class='image aligncenter'&gt;&lt;tr&gt;&lt;td&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;//www.google.com/trends/embed.js?hl=en-US&amp;q=Machete+Order&amp;cmpt=q&amp;content=1&amp;cid=TIMESERIES_GRAPH_0&amp;export=5&amp;w=600&amp;h=330&quot;&gt;&lt;/script&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Needless to say, the traffic to my blog has been both extremely unexpected and unpredictable.  The Star Wars post had been online for months with virtually no traffic before &lt;a href=&quot;http://archive.wired.com/geekdad/2012/02/machete-order-star-wars/&quot;&gt;Wired&lt;/a&gt; suddenly linked to it, instantly decimating my web server.  I&amp;#39;ve fought and fought with various configurations for Wordpress, used &lt;a href=&quot;http://wordpress.org/plugins/w3-total-cache/&quot;&gt;as much caching&lt;/a&gt; as possible, and even had my &lt;a href=&quot;https://www.servint.net/&quot;&gt;web host&lt;/a&gt; temporarily upgrade my service, all trying to keep a web site that makes no money online even when traffic increases by a factor of 100 overnight.  &lt;strong&gt;When my site goes down, it&amp;#39;s embarrassing, because even though it&amp;#39;s just a personal blog on a shared host, it gives the impression that I, as a software developer, don&amp;#39;t know how to make a web site scale&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;Switching to Jekyll&lt;/h1&gt;

&lt;table class='image alignright' width='306'&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://www.nomachetejuggling.com/assets/jekyll-logo.png&quot; width='300' height='141'/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;So after the most recent pummeling I took due to a &lt;a href=&quot;https://news.ycombinator.com/item?id=7953725&quot;&gt;Hacker News link&lt;/a&gt;, I decided it was time to &lt;strong&gt;bite the bullet and convert the entire site to &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;&lt;/strong&gt;.  I&amp;#39;ve messed around with the technology before to build another, smaller, blog, so I was somewhat familiar with the constructs and idioms.  A lot of work and ten custom plugins later, the entire site was converted, with very little loss of functionality.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I didn&amp;#39;t want to serve the files from my shared host because I know firsthand that the traffic spikes I experience are often enough to overwhelm apache itself, and I couldn&amp;#39;t host it with &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; due to the aforementioned ten custom plugins.  I&amp;#39;ve used both Amazon S3 (to host the smaller Jekyll-based blog) and Rackspace Cloudfiles (as a CDN for the Wordpress version).  Of those two, I find Amazon S3 to be extremely overcomplicated and difficult to work with, but there&amp;#39;s a great &lt;a href=&quot;https://github.com/laurilehmijoki/s3_website&quot;&gt;S3_Website&lt;/a&gt; gem that makes uploading a Jekyll blog a snap.  Rackspace Cloudfiles is much more straightforward to work with, but the &lt;a href=&quot;https://github.com/nicholaskuechler/jekyll-rackspace-cloudfiles-clean-urls/blob/master/cloudfiles_jekyll_upload.py&quot;&gt;Python script&lt;/a&gt; that &lt;a href=&quot;http://www.rackspace.com/blog/running-jekyll-on-rackspace-cloud-files/&quot;&gt;even Rackspace itself&lt;/a&gt; links to has given me various dependency issues.&lt;/p&gt;

&lt;p&gt;&lt;span data-pullquote=&quot;Rackspace Cloudfiles is a bit cheaper per GB than Amazon S3, and ... that became the deciding factor. &quot; class=&quot;left&quot;&gt;Rackspace Cloudfiles is a bit cheaper per GB than Amazon S3, and ... that became the deciding factor. &lt;/span&gt; In the end, Rackspace Cloudfiles is a bit cheaper per GB than Amazon S3, and since this blog receives a nontrivial amount of traffic, that became the deciding factor.  Since I always had issues with the python script that uploads a Jekyll blog to Cloudfiles, I decided to do some research into alternative means of automated uploading (&lt;a href=&quot;http://cyberduck.io/&quot;&gt;Cyberduck&lt;/a&gt; works, but I wanted something that I could make Jenkins run).&lt;/p&gt;

&lt;p&gt;Unfortunately, &lt;strong&gt;almost everything I found wound up linking to the exact same Python script that gave me trouble&lt;/strong&gt;.  So I decided to write my own, which I&amp;#39;m open-sourcing for the benefit of anyone else that has had similar problems.&lt;/p&gt;

&lt;h1&gt;jekyll-cloudfiles-upload&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rodhilton/jekyll-cloudfiles-upload&quot;&gt;jekyll-cloudfiles-upload is hosted on GitHub&lt;/a&gt; and is a single Ruby script that can be dropped into your Jekyll blog project directory.  It will look in &lt;code&gt;_site&lt;/code&gt; for all of your static site files, compare them to what is in your Rackspace Cloudfiles container, upload any that need updating, and delete anything in the container you no longer have.  It only has a few small dependencies (ruby and a ruby gem named &lt;code&gt;Fog&lt;/code&gt;), and I&amp;#39;ve been using it to update this blog with great success.&lt;/p&gt;

&lt;h2&gt;Installation and Usage&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Log into Rackspace Cloud Files and create your container.  &lt;em&gt;You must create your container first, the script will not do that&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Pro-Tip&lt;/strong&gt;: Before you upload anything, set your container&amp;#39;s TTL to something other than the default, which is 72 hours.  Once a file is loaded into the CDN, it seemed to me that, even if you changed your container&amp;#39;s TTL after the fact, the TTL change itself wouldn&amp;#39;t propagate until after 72 hours.  Changing it first (I use 15 minutes) before uploading files seemed to fix this issue.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install &lt;code&gt;fog&lt;/code&gt; rubygem via &lt;code&gt;gem install fog&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Put a &lt;code&gt;.fog&lt;/code&gt; file in your home directory that looks like this (it&amp;#39;s a yaml file, be careful not to use tabs instead of spaces):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;default:
    rackspace_username: your_user_name
    rackspace_api_key: your_api_key
    rackspace_region: your_preferred_region
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The rackspace regions are strings like &amp;#39;iad&amp;#39; or &amp;#39;dfw&amp;#39;, depending on your preferred container region.  You can get your api key from the Rackspace control panel&amp;#39;s Account page.&lt;/p&gt;

&lt;p&gt;If you have multiple sites with multiple containers all in different regions, you&amp;#39;ll have to hand-alter the script so that it doesn&amp;#39;t look up this information in Fog, but just hardcodes it instead.  If you do this, I suggest using the ruby symbol syntax in the &lt;code&gt;cloudfiles_upload.rb&lt;/code&gt; script, such as &lt;code&gt;:iad&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copy the &lt;code&gt;cloudfiles_upload.rb&lt;/code&gt; script from the GitHub repository into the directory for your Jekyll project.  It&amp;#39;s a good idea to also make it executable via &lt;code&gt;chmod a+x cloudfiles_upload.rb&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Build your site via &lt;code&gt;jekyll build&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Execute &lt;code&gt;./cloudfiles_upload.rb container_name&lt;/code&gt; or &lt;code&gt;ruby cloudfiles_upload.rb container_name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The script will spider through the &lt;code&gt;_site&lt;/code&gt; subdirectory and look for any files that need to be added, deleted, or updated.  Only files whose md5 hashes differ will from those in the container will be uploaded, so it will not upload files unnecessarily.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You may optionally leave off the &lt;code&gt;container_name&lt;/code&gt; parameter, and the script will use the name of the directory you are in.  So if you name your directory and container &lt;code&gt;mysite.com&lt;/code&gt;, you can just run &lt;code&gt;./cloudfiles_upload.rb&lt;/code&gt; with no arguments.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Pro-Tip&lt;/strong&gt;: Add &lt;code&gt;cloudfiles_upload.rb&lt;/code&gt; to your &lt;code&gt;_config.yml&lt;/code&gt; file&amp;#39;s exclusion list so it doesn&amp;#39;t get uploaded.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;Dogfooding&lt;/h1&gt;

&lt;p&gt;I offer no guarantee of support on this script, but I can assure you that I&amp;#39;m dogfooding the hell out of it.  I set up a private Jenkins instance that watches for changes to my private &lt;a href=&quot;https://bitbucket.org/&quot;&gt;BitBucket&lt;/a&gt; repository that contains this blog.  The repository has &lt;code&gt;jekyll-cloudfiles-upload&lt;/code&gt; as a submodule, with the &lt;code&gt;cloudfiles_upload.rb&lt;/code&gt; script symlinked to the submodule&amp;#39;s version.  Any change to the blog pulls down the most recent copy of the script, builds the blog, and then runs the script to upload it.&lt;/p&gt;

&lt;p&gt;I liked this solution so much that I wound up converting the smaller blog that I had been running on Amazon S3 over to Rackspace Cloudfiles as well.  I also have a Jenkins job that looks for changes to the &lt;code&gt;jekyll-cloudfiles-upload&lt;/code&gt; project, and automatically kicks off the jobs for both web sites whenever it changes as well, so this script is definitely instrumental to a process that controls a web site whose downtime personally embarrasses me a great deal.  Again, no guarantees, but I&amp;#39;m putting a lot of trust in this script, for whatever that&amp;#39;s worth.&lt;/p&gt;

&lt;h1&gt;Jekyll Thoughts&lt;/h1&gt;

&lt;p&gt;So far, I&amp;#39;m digging Jekyll a lot.  I&amp;#39;d used it before for the smaller blog as I mentioned, but that was my first, so I used &lt;a href=&quot;http://jekyllbootstrap.com/&quot;&gt;JekyllBootstrap&lt;/a&gt; thoroughly.  It was good for getting set up, but I found making modifications to themes and general customization quite perplexing and difficult.  This time, I built everything from scratch, including all of the custom plugins I&amp;#39;m using, and I have a much better understanding of how Jekyll works.&lt;/p&gt;

&lt;p&gt;The only thing I had to give up was the rightmost sidebar.  Previously, that area actually showed my latest tweet, and various updates from my Goodreads, Trackt, Last.fm, Groovee, and Diigo feeds.  Those used the &lt;a href=&quot;https://wordpress.org/plugins/better-rss-widget/&quot;&gt;Better RSS Widget&lt;/a&gt; Wordpress plugin, and I liked the feature but it would occasionally have trouble pulling feeds, causing it to leave an error on the cached version of a page for hours until the cache cleared.  I&amp;#39;m alright with my sidebar-o-social-icons that I replaced it with, though.&lt;/p&gt;

&lt;p&gt;&lt;span data-pullquote=&quot;I love writing posts in Markdown. &quot; class=&quot;right&quot;&gt;I love writing posts in Markdown. &lt;/span&gt;  I&amp;#39;ve always wanted to be able to do that with Wordpress, but found that plugins which supported it were generally terrible.  I wish it was easier to make custom alterations to the markdown processing, but &lt;a href=&quot;http://jekyllrb.com/docs/plugins/#tags&quot;&gt;Jekyll Tags&lt;/a&gt; are a decent workaround.  Like I mentioned earlier, I&amp;#39;ve got a lot of custom plugins gluing this site together, but I&amp;#39;m happy with the readability of my markdown source files, and I like that there&amp;#39;s an abstraction layer translating those to HTML rather than embedding HTML directly into posts or writing Wordpress shortcode processors.&lt;/p&gt;

&lt;p&gt;I may eventually put some of these plugins into GitHub as well, and I wound up writing a pretty handy extension to &lt;a href=&quot;http://highlightjs.org/&quot;&gt;highlight.js&lt;/a&gt; that makes it easier to copy and paste syntax highlighted code which I think others might find useful.  But easily, the most useful thing I wrote to support this effort - aside from a highly customized script that ran my blog post&amp;#39;s html files through forty regular expressions to convert them to markdown - was the &lt;code&gt;cloudfiles_upload.rb&lt;/code&gt; script.  Hopefully others may find it useful as well.&lt;/p&gt;
</description>
				<pubDate>Fri, 04 Jul 2014 00:00:00 -0400</pubDate>
				<link>http://www.nomachetejuggling.com/2014/07/04/uploading-a-jekyll-site-to-rackspace-cloudfiles/</link>
				<guid isPermaLink="true">http://www.nomachetejuggling.com/2014/07/04/uploading-a-jekyll-site-to-rackspace-cloudfiles/</guid>
			</item>
		
			<item>
				<title>The Worst Programming Interview Question</title>
				<description>&lt;p&gt;Years ago, I wrote about a &lt;a href=&quot;http://www.nomachetejuggling.com/2008/12/11/my-least-favorite-interview-question/&quot;&gt;particular type of interview question&lt;/a&gt; that I despise.  Today I&amp;#39;d like to discuss a much more specific question, rather than a type.  I&amp;#39;ve never been asked this question myself, but I have seen it asked in an actual interview, and I officially nominate it as the worst question I&amp;#39;ve ever heard in an interview.&lt;/p&gt;

&lt;p&gt;A co-worker at a previous company used to ask this question, and it was the first time I&amp;#39;d ever heard it in an interview setting.  This company did pair interviews, two engineers with one candidate.  One day he and I were the two engineers interviewing some poor candidate.  The candidate had actually done pretty well as far as I was concerned, and then my co-worker busted this question out.  The candidate stumbled over the answer, visibly frustrated with himself.  In the post-interview pow-wow, all of the engineers who&amp;#39;d interviewed him gave him the thumbs up, except my interview partner, who refused to hire him on the grounds that he completely flubbed this question, and &amp;quot;any engineer worth his salt should be able to answer it.&amp;quot;  He actually said that if we hired this individual, he would be unwilling to work on a team with the candidate.  For what it&amp;#39;s worth, the story has a happy ending, in that we hired the candidate in spite of his protests, fired the co-worker within a few months, and the candidate is still at that company, doing quite well.&lt;/p&gt;

&lt;p&gt;Anyway, I think this question perfectly represents everything that can go wrong with an interview question, so I&amp;#39;d like to discuss it here to explain why it&amp;#39;s almost hilariously awful as an interview question:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Write a function that can detect a cycle in a linked list.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Seems like your basic algorithm coding question at first, right?  Hop up and write the function on the white board; totally reasonable, right?  Except it&amp;#39;s not, it&amp;#39;s brain-meltingly terrible.  Let&amp;#39;s break it down.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h1&gt;1. It&amp;#39;s completely inappropriate&lt;/h1&gt;

&lt;p&gt;This is a job interview.  You have a dynamic where you&amp;#39;re talking to someone who is interviewing for a job.  It&amp;#39;s naturally nerve-wracking, and &amp;quot;puzzler&amp;quot; questions where there&amp;#39;s some &amp;quot;a-ha&amp;quot; moment of clarity are the worst kind of programming questions you can ask.  If you don&amp;#39;t have the a-ha moment in the interview, you won&amp;#39;t get it, and a good chunk of your brain will be devoted to thinking &amp;quot;oh shit I&amp;#39;m blowing this interview&amp;quot; rather than focusing on the question at hand.&lt;/p&gt;

&lt;p&gt;People like to pose puzzlers to &amp;quot;see how people think&amp;quot; but that&amp;#39;s nonsense in the case of puzzler questions.  &lt;strong&gt;You can&amp;#39;t reason your way through a puzzler, that&amp;#39;s why it&amp;#39;s a puzzler&lt;/strong&gt;.  You just have to hope you have the a-ha moment.  Sometimes I&amp;#39;ve heard people like to &amp;quot;see how people handle pressure&amp;quot; but they&amp;#39;re &lt;em&gt;already&lt;/em&gt; in an interview, the pressure is already there.&lt;/p&gt;

&lt;p&gt;Asking puzzler questions is a complete waste of time, &lt;strong&gt;all you&amp;#39;re doing is testing if someone has seen your particular puzzler before or not&lt;/strong&gt;.  You may also be testing their acting chops, as the person who has heard the question before pretends it&amp;#39;s their first time hearing it, and they feign reasoning their way through the problem to arrive at the answer they already know as soon as the question comes out of your mouth.&lt;/p&gt;

&lt;p&gt;This particular problem is the worst offender in this regard.  Why, you ask?  Well, imagine if someone truly &lt;em&gt;was&lt;/em&gt; hearing this problem for the first time, and you&amp;#39;re expecting them to reason their way to the answer. &lt;/p&gt;

&lt;p&gt;In this case, the generally &amp;quot;correct&amp;quot; answer is a tortoise-and-hare algorithm, where you have two pointers at the head of your linked list, one traverses the list two nodes at a time, and one traverses the list one node at a time; if ever the pointers point to the same node, you have a cycle somewhere.&lt;/p&gt;

&lt;p&gt;Sure, there are easier answers, like marking each node with some kind of &amp;#39;seen&amp;#39; boolean, or traversing the list from each node to see if you come back to it, or duplicating the list into a hash and looking for a collision, but as soon as you provide those answers, the interviewer will add restrictions saying to use less memory or use less time or don&amp;#39;t modify the underlying data structure.  The only one that makes the question &amp;quot;stop&amp;quot; is the tortoise-and-hare algorithm.&lt;/p&gt;

&lt;p&gt;Is it reasonable to expect someone to think of this, from scratch?  After all, you&amp;#39;re pretty confident you could think of it, right?  Well, the Linked List as a data structure was &lt;a href=&quot;http://en.wikipedia.org/wiki/Linked_list#History&quot;&gt;discovered by Allen Newell, Cliff Shaw and Herbert A. Simon&lt;/a&gt; in 1955.  The &amp;quot;correct&amp;quot; cycle detection algorithm for a Linked List is named &amp;quot;Floyd&amp;#39;s cycle-finding algorithm&amp;quot; in honor of its inventor, Robert W. Floyd, who discovered it in &lt;a href=&quot;http://dl.acm.org/citation.cfm?doid=321420.321422&quot;&gt;a 1967 paper&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Between 1955 and 1967, the problem of &amp;quot;how do we determine if there is a cycle in a linked list without modifying the list&amp;quot; was an open problem.  Meaning, any number of PhD candidates in Mathematics or Computer Science could have written about it as part of their dissertation.  With all of those hundreds and hundreds of minds, &lt;strong&gt;this problem remained open for 12 years&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Do you honestly think you could, in a twenty minute interview, from scratch, come up with the solution to a problem that remained open in the field for 12 years, all under a pressure far more intense than any academic?  Seems pretty damn unlikely, &lt;strong&gt;the only reason you think you could do so is that you&amp;#39;ve heard the answer before, and it seems obvious and simple in retrospect&lt;/strong&gt;.  In other words, &amp;quot;a-ha!&amp;quot;&lt;/p&gt;

&lt;h1&gt;2. It&amp;#39;s completely disconnected from reality&lt;/h1&gt;

&lt;p&gt;As if the above weren&amp;#39;t reason enough for this to be a laughably bad question, you have to also ask yourself, is this even a good question for determining if this engineer has the skills they need for the job?&lt;/p&gt;

&lt;p&gt;Let me challenge the question altogether: &lt;strong&gt;why would you ever find yourself in a situation where your linked list has a cycle?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the real-world, what could lead to this?  I don&amp;#39;t mean mechanically, obviously you get a cycle if you have a node whose &amp;quot;next&amp;quot; pointer is upstream of that node.  I mean, how does it actually happen in real life?&lt;/p&gt;

&lt;p&gt;See, a Linked List is a data structure, it&amp;#39;s not an abstract data type.  Generally you wouldn&amp;#39;t be making a &lt;code&gt;LinkedList&lt;/code&gt; class, you&amp;#39;d be making a &lt;code&gt;Stack&lt;/code&gt; or a &lt;code&gt;Queue&lt;/code&gt; or something like that.  Those would be the classes you&amp;#39;re writing and exposing to a consumer of your class, and it would just so happen that your internal &lt;em&gt;implementation&lt;/em&gt; of those types is a linked list.  So what are the methods on your &lt;code&gt;Stack&lt;/code&gt; class, for example?  &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;pop&lt;/code&gt;, &lt;code&gt;peek&lt;/code&gt;, etc?  Well, if someone is using those methods, how on earth are you going to get a cycle in your list?  They&amp;#39;re not messing with the &lt;code&gt;next&lt;/code&gt; or &lt;code&gt;prev&lt;/code&gt; pointers, they&amp;#39;re just pushing and popping with objects of some type.&lt;/p&gt;

&lt;p&gt;Even if you wrote a &lt;code&gt;LinkedList&lt;/code&gt; class for some library, you still can&amp;#39;t find yourself in this situation.  Take a look at &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html&quot;&gt;Java&amp;#39;s &lt;code&gt;LinkedList&lt;/code&gt;&lt;/a&gt; class.  There is no way to manipulate the pointers for the node&amp;#39;s next or previous references.  You can get the first, or get the last, or add an object to a specific place in the list, or remove an object by index or by value.  &lt;/p&gt;

&lt;p&gt;Take a look at the Java source code and you&amp;#39;ll find those next and previous pointers are here, inside of &lt;code&gt;LinkedList&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    private static class Entry &amp;lt;E&amp;gt; {
      E element;

      java.util.LinkedList.Entry&amp;lt;E&amp;gt; next;
      java.util.LinkedList.Entry&amp;lt;E&amp;gt; previous;

      Entry(E e, java.util.LinkedList.Entry&amp;lt;E&amp;gt; entry, java.util.LinkedList.Entry&amp;lt;E&amp;gt; entry1) { /* compiled code */ }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a &lt;code&gt;private static&lt;/code&gt; class, inside of &lt;code&gt;LinkedList&lt;/code&gt;.  You can&amp;#39;t instantiate a &lt;code&gt;LinkedList.Entry&lt;/code&gt;.  You have no way to manipulate these &lt;code&gt;next&lt;/code&gt; or &lt;code&gt;previous&lt;/code&gt; pointers.  Because those things are the state of the list, and &lt;strong&gt;&lt;code&gt;LinkedList&lt;/code&gt; encapsulates the behaviors with the state inside of the class,&lt;/strong&gt; like it ought to.&lt;/p&gt;

&lt;p&gt;If your &lt;code&gt;LinkedList&lt;/code&gt; class were vulnerable to any kind of cycle creation, you&amp;#39;ve done a poor job of encapsulation.  You either have a design failure in your interface, or a bug in your implementation.  In either case, your time would be better spent addressing your error rather than coding up some kind of cycle detection mechanism.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s the only cycle detector you&amp;#39;ll ever need to write for your &lt;code&gt;LinkedList&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class LinkedList {
    public boolean containsCycle() {
        return false;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is no real situation in which this method&amp;#39;s return value would be different than one that uses a tortoise-and-hare algorithm.&lt;/p&gt;

&lt;p&gt;In the real world of actual coding, you&amp;#39;d very rarely find yourself ever needing to code up a linked list implementation from scratch, but if you did, you&amp;#39;d certainly have no reason to expose methods that would allow someone using your code to create a cycle.  The only way it could be done is through intentional, malicious metaprogramming or reflection of some kind, which could just as easily bypass your &lt;code&gt;detectCycle&lt;/code&gt; method anyway.&lt;/p&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Many interview questions fail for one of these two reasons.  Either the question is too much of a puzzler to reasonably be solved in an interview setting, or it&amp;#39;s so far removed from the skillset required to do the job (&amp;quot;how would you move Mt. Fuji&amp;quot;) that it&amp;#39;s useless.&lt;/p&gt;

&lt;p&gt;This question, hilariously, suffers from both of these major problems, and it suffers from each about as hard as it possibly could.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re asking this question, everyone who has ever answered it to your satisfaction was merely proving they have good memory recall abilities from their Computer Science curriculum, nothing more.  Folks you turned away from the job for failing to answer this question may have been more qualified than you realize, and your company maybe should have turned you away instead.&lt;/p&gt;

&lt;p&gt;Linked List cycle detection: just don&amp;#39;t ask it.&lt;/p&gt;

&lt;p&gt;Update: One commenter pointed out that if the data structure in question was a digraph where every node has an out degree of at most one, the question still applies.  Totally valid point, in that case you &lt;strong&gt;are&lt;/strong&gt; exposing methods that allow consumers of your structure to manually set the pointers.  That&amp;#39;s a far more reasonable question but, again, I think you&amp;#39;re still just asking someone how well they recall their computer science classes, or you&amp;#39;re asking an unreasonable question in an interview, unless you&amp;#39;re willing to accept answers with worse runtime or space complexity than the tortoise-and-hare algorithm.&lt;/p&gt;
</description>
				<pubDate>Tue, 24 Jun 2014 00:00:00 -0400</pubDate>
				<link>http://www.nomachetejuggling.com/2014/06/24/the-worst-programming-interview-question/</link>
				<guid isPermaLink="true">http://www.nomachetejuggling.com/2014/06/24/the-worst-programming-interview-question/</guid>
			</item>
		
			<item>
				<title>Top 10 Career-Changing Programming Books</title>
				<description>&lt;p&gt;When I graduated with a Computer Science degree ten years ago, I was excited to dive into the world of professional programming.  I had done well in school, and I thought I was completely ready to be employed doing my dream job: writing code.  What I discovered in my very first interview, however, was that I was massively underprepared to be an actual professional programmer.  I knew all about data structures and algorithms, but nothing about how actual professional, &amp;quot;enterprise&amp;quot; software was written.  I was lucky to find a job at a place willing to take a chance on me, and proceeded to learn as much as I could as quickly as I could to make up for my deficiencies.  This involved reading a LOT of books.&lt;/p&gt;

&lt;p&gt;Here I reflect on my 10-year experience programming professionally and all of the books I&amp;#39;ve read in that time, and offer up the ten that had the most profound impact on my career.  Note that these are not the &amp;quot;10 best&amp;quot; programming books.  I do feel all of these books are very good, but that&amp;#39;s not the only reason I&amp;#39;m selecting them here; I&amp;#39;m mentioning them because I felt that I was a profoundly different person after reading each than I was beforehand.  Each of these books forced me to think differently about my profession, and I believe they helped mold me into the programmer I am today.&lt;/p&gt;

&lt;p&gt;None of these books are language books.  I may feel like learning to program in, say, Scala, had a profound impact on how I work professionally, but the enlightening thing was Scala itself, not the book I used to help me learn it.  Similarly, I&amp;#39;d say that learning to use Git had a significant impact on how I view version control, but it was Git that had the impact on me, not the book that I used to teach myself the tool.  The books on this list are about the the content they dumped into my brain, not just a particular technology they taught me, even if a technology had a profound impact on me.&lt;/p&gt;

&lt;p&gt;So, without further ado...&lt;/p&gt;

&lt;h1&gt;Top &amp;quot;10&amp;quot;&lt;/h1&gt;

&lt;h2&gt;&lt;a href=&quot;http://www.amazon.com/The-Pragmatic-Programmer-Journeyman-Master/dp/020161622X&quot;&gt;The Pragmatic Programmer&lt;/a&gt;&lt;/h2&gt;

&lt;table class='image alignright' width='244'&gt;&lt;tr&gt;&lt;td&gt;&lt;a href='http://www.amazon.com/The-Pragmatic-Programmer-Journeyman-Master/dp/020161622X'&gt;&lt;img src=&quot;http://www.nomachetejuggling.com/assets/pragprog-238x300.jpg&quot; width='238' height='300'/&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I know, I know.  Every list you&amp;#39;ve ever seen on the internet includes this book.  I&amp;#39;m sorry, I wish I could be more original, but this book really is an eye-opener.  &lt;em&gt;The Pragmatic Programmer&lt;/em&gt; contains 46 tips for software professionals that are simply indispensable.  As the name implies, the book avoids falling into any kind of religious wars with its tips, it&amp;#39;s simply about pragmatism.&lt;/p&gt;

&lt;p&gt;If you were to read only one book on this list, this is the one to read.  It never goes terribly deep into anything, but it has a great breadth, covering the basics that will take a recent college-grad and transform him or her into someone employable, who can be a useful member of a team.&lt;/p&gt;

&lt;p&gt;Many programmers got into the field because they liked hacking on code in their spare time, writing scripts to automate tasks or otherwise save time.  There is a set of skills one develops just to sling code that makes a computer perform specific tasks, and that exact same skillset is needed by many, many employers.  But there are many people who see programming professionally as simply an extension of their hobby, and do things the same way whether they are hacking at home or at work.  &lt;em&gt;The Pragmatic Programmer&lt;/em&gt; permanently altered how I view programming, it&amp;#39;s not just extending my hobby of coding and getting people to pay me for it; there&amp;#39;s a fundamental line between professional coding and hobbyist coding, and I am able to see that line and operate differently depending on what side of it I&amp;#39;m on thanks to &lt;em&gt;The Pragmatic Programmer&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;How groundbreaking is this book?  Groundbreaking enough that it launched an entire publishing company.  It&amp;#39;s a big deal, if you&amp;#39;ve somehow managed not to read it yet, go do so.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What it changed:&lt;/strong&gt; How I view &amp;quot;programming&amp;quot; as a job instead of a hobby I get paid for.&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;http://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley/dp/0321601912&quot;&gt;Continuous Delivery&lt;/a&gt;&lt;/h2&gt;

&lt;table class='image alignright' width='233'&gt;&lt;tr&gt;&lt;td&gt;&lt;a href='http://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley/dp/0321601912'&gt;&lt;img src=&quot;http://www.nomachetejuggling.com/assets/continuousDelivery-227x300.jpg&quot; width='227' height='300'/&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Releasing software is one of the most stressful parts of the job.  I can&amp;#39;t tell you how many times in my career I&amp;#39;ve been part of a botched launch, or up until the wee hours of the morning on a conference call trying to get software into the hands of customers.  When do we branch, what goes in what branch, how do we build the artifacts, what process do we walk through to get them where they need to go?  It can be one of the most complex, error-prone, and difficult parts of professional programming.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Continuous Delivery&lt;/em&gt; means to do away with all of that difficulty.  It describes a mindset, toolset, and methodology for completely turning releases on their head.  Instead of doing them less frequently because they are difficult, do them more frequently so they&amp;#39;re forced to be easier.  In fact, don&amp;#39;t just do them more frequently, do them &lt;strong&gt;all the time&lt;/strong&gt;.  &lt;em&gt;Continuous Delivery&lt;/em&gt; describes, with real-world practical examples, how to version control all configuration, how to test integration points, how to handle branching and branch content, how to safely rollback, how to deploy with no downtime, how to do continuous testing, and how to automate everything from checkin to release.&lt;/p&gt;

&lt;p&gt;In a lot of ways the book describes a pie-in-the-sky ideal.  It&amp;#39;s difficult to achieve truly continuous delivery, though GitHub, Flickr, and many other companies seem to have done so.  But as the old adage goes, aim for the moon, even if you miss you&amp;#39;ll end up among the stars.  Wait, that adage is insane, stars are further away than the moon.  Who came up with that phrase?  Where was I?  Oh right, even if you don&amp;#39;t ever reach the true ideal, every step you made toward it makes deployments at your company that much better.  I&amp;#39;ve worked in various environments where the principles of this book have been applied at different levels, and I can personally attest that there is a near-perfect linear relationship between how much you adhere to the advice in this book, and how smoothly releases go.&lt;/p&gt;

&lt;p&gt;I worked in an environment operating at about a 70%-level of adherence to the philosophy outlined in this book, and it was heaven.  When I left that job, my new employer was at approximately 0%, and it was complete misery.  I set about implementing the ideas of the book and even a 10%-level of adherence was like a fifty-ton boulder being removed from my back.  It worked so well that it was like a blinding light of epiphany for co-workers, and we wound up hiring someone whose sole job it was to help get us further along.  Today we&amp;#39;re at about 50%, and it&amp;#39;s easily five times better than it was at 10%, and infinitely better than at 0%.  Still hoping to get to 100%, obviously, but there&amp;#39;s no doubt that every aspect of the book makes releases smoother and less stressful.  I simply don&amp;#39;t think I could ever work any other way ever again, it&amp;#39;s like finding out you&amp;#39;ve been coding with a blindfold on for years.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What it changed:&lt;/strong&gt;  How I release software and bake releasability into my code.&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&quot;&gt;Clean Code&lt;/a&gt; / &lt;a href=&quot;http://www.amazon.com/The-Clean-Coder-Professional-Programmers/dp/0137081073&quot;&gt;The Clean Coder&lt;/a&gt;&lt;/h2&gt;

&lt;table class='image alignright' width='306'&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://www.nomachetejuggling.com/assets/cleanduology-300x191.jpg&quot; width='300' height='191'/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Look at this, only a few items into my list and I&amp;#39;ve already cheated by including two books as a single entry.  Yes, &lt;em&gt;Clean Code&lt;/em&gt; and &lt;em&gt;The Clean Coder&lt;/em&gt; are two separate books, but honestly they&amp;#39;re both very short, and very similar.  Both books are about how a programmer should conduct him or herself professionally, they simply cover different aspects.  Professional software developers communicate with their coworkers in two ways: through code and through everything else.  &lt;em&gt;Clean Code&lt;/em&gt; is about how you communicate with your co-workers (fellow programmers) through code itself, and &lt;em&gt;The Clean Coder&lt;/em&gt; is about how you communicate verbally, or through e-mail.&lt;/p&gt;

&lt;p&gt;Both of these books, written by &amp;quot;Uncle&amp;quot; Bob Martin, really could easily be a single book with two large sections.  Bob&amp;#39;s philosophy toward professional software development is honest and direct, some would even say blunt.  He makes no bones about it: fail to communicate in the way he describes, and you&amp;#39;re bordering on professional negligence.  It seems harsh but, frankly, I&amp;#39;m convinced.  Call me a believer.  &lt;/p&gt;

&lt;p&gt;I definitely treat my code differently in light of his suggestions from &lt;em&gt;Clean Code&lt;/em&gt;.  It may seem strange that I categorize &lt;em&gt;Clean Code&lt;/em&gt; as a book about communication, given that it&amp;#39;s all about how to write code.  But in the words of Abelson and Sussman, &amp;quot;Programs should be written for people to read, and only incidentally for machines to execute.&amp;quot;  Machines will run code whether it&amp;#39;s &amp;quot;clean&amp;quot; or not, but your coworkers will only be able to understand and work with your code if it&amp;#39;s clean.  &lt;em&gt;Clean Code&lt;/em&gt; is about how to structure your code for others to read, or even for the future version of yourself to read.&lt;/p&gt;

&lt;p&gt;Even more than &lt;em&gt;Clean Code&lt;/em&gt;, &lt;em&gt;The Clean Coder&lt;/em&gt; had a profound impact on me.  It drastically altered how I talk to bosses, product owners, project managers, marketers, salespeople, and other non-programmers.  It advocates taking ownership of your screwups, being honest about abilities and deadlines, and up-front about costs.  Not every co-worker you encounter will appreciate the approach outlined in &lt;em&gt;The Clean Coder&lt;/em&gt;, but ultimately your customers will, because your products will be better for it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What they changed:&lt;/strong&gt;  How I conduct myself professionally.&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;http://www.amazon.com/Release-It-Production-Ready-Pragmatic-Programmers/dp/0978739213&quot;&gt;Release It!&lt;/a&gt;&lt;/h2&gt;

&lt;table class='image alignright' width='256'&gt;&lt;tr&gt;&lt;td&gt;&lt;a href='http://www.amazon.com/Release-It-Production-Ready-Pragmatic-Programmers/dp/0978739213'&gt;&lt;img src=&quot;http://www.nomachetejuggling.com/assets/releaseit-250x300.jpg&quot; width='250' height='300'/&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;A product&amp;#39;s life doesn&amp;#39;t begin when you first create the source code repository, or write the first line of code, or even finish the first story.  It begins as soon as it&amp;#39;s launched into production, into the hands of real users.  Everything before that is just bits, just plain text files on disks.  So in a lot of ways, it&amp;#39;s astonishing how much thought is put into the code for the period of time before it&amp;#39;s really born.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Release It!&lt;/em&gt; places the stress on the real life of a program.  It&amp;#39;s all about monitoring, health checking, logging, and ensuring that applications remain operational.  It&amp;#39;s about baking in concern for capacity and stability from the start, and what needs to be done to keep a program operating even when there are outages, or broken integrations, or massive spikes in load.  Most of all, it&amp;#39;s about &lt;strong&gt;assuming&lt;/strong&gt; that code will fail, backend servers will die, databases will timeout, and everything your software depends on will eventually go to hell.  It&amp;#39;s a completely different approach to software development, and it&amp;#39;s completely eye-opening.&lt;/p&gt;

&lt;p&gt;Not to be too pejorative, but if you do enterprise application development, you probably shouldn&amp;#39;t write another line of code before you read this book.  I consider pretty much everything I&amp;#39;ve written before it to be inadequate for real production use, even all the stuff currently in production.  It covers patterns and anti-patterns to support (or subvert) stability as well as capacity, and the section of the book covering these topics is simply excellent. But then it goes beyond that to also discuss Operational enablement. Even if you&amp;#39;re not into DevOps, and don&amp;#39;t want to really be involved in DevOps work, this book gives you the tools and tips to do what aspect of DevOps is the purview of pure developers. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Release It!&lt;/em&gt;&amp;#39;s tactics will make you your operations team&amp;#39;s favorite person, and greatly help cover you and your teams ass in the eventual case of catastrophic failure somewhere.  The patterns sections alone are worth the price of admission here, and the fact that the book is chock full of even more useful content beyond them is kind of stunning.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What it changed:&lt;/strong&gt;  What I consider to be &amp;quot;production-ready&amp;quot;, and how I view Operations.&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;http://www.amazon.com/First-Design-Patterns-Elisabeth-Freeman/dp/0596007124&quot;&gt;Head First Design Patterns&lt;/a&gt; / &lt;a href=&quot;http://www.amazon.com/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420&quot;&gt;Patterns of Enterprise Application Architecture&lt;/a&gt;&lt;/h2&gt;

&lt;table class='image alignright' width='306'&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://www.nomachetejuggling.com/assets/patterns-300x189.jpg&quot; width='300' height='189'/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;No list like this would be complete without a book about design patterns.  But where&amp;#39;s the famous &amp;quot;Gang of Four&amp;quot; book, you ask?  Not on this list, that&amp;#39;s where.  Honestly, GoF was a pretty groundbreaking book at the time, but I personally think the presentation of the information it contains is awful.  I believe everything presented in GoF is presented better in &lt;em&gt;Head First Design Patterns&lt;/em&gt;.  I know that not everyone is crazy about the Head First series, and even I find the structure and layout of the book grating at times, but I think the diagrams and visuals are light years better than those of GoF.  &lt;/p&gt;

&lt;p&gt;I also think Head First does a better job of providing &lt;em&gt;contextual&lt;/em&gt; examples.  While GoF provides sample code implementing the pattern, I feel that &lt;em&gt;Head First Design Patterns&lt;/em&gt; provides a more valuable context for its examples, with more explanation about what the code is doing and what it&amp;#39;s for.  This helps readers understand &lt;em&gt;when&lt;/em&gt; to use specific patterns, which I feel is the most important thing to learn when learning patterns.  Too often, people read their first design patterns book and immediately decide to implement as many as they can.  This is the wrong approach to take with patterns, and I think Head First&amp;#39;s contextualization and strong visuals make it easier for readers to avoid this mistake.  &lt;a href=&quot;http://www.codinghorror.com/blog/2005/09/head-first-design-patterns.html&quot;&gt;Jeff Atwood disagrees&lt;/a&gt; and I can see his point, but I think overall this book is better in this regard than the classic GoF.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Patterns of Enterprise Application Architecture&lt;/em&gt; is the GoF book, but at the level of architecture rather than code.  Like GoF, it is extremely dry, and somewhat difficult to get through cover to cover, working better as a reference book than a reading book.  It does a very good job, however, of managing to still provide ample context, describing when you&amp;#39;d want to use (or avoid) a particular pattern.  I can&amp;#39;t tell you how many times I&amp;#39;ve referenced this book.&lt;/p&gt;

&lt;p&gt;Patterns provide great &amp;quot;templates&amp;quot; to use when solving common problems.  They need to reached for with great care to avoid overuse, but when utilized appropriately can give developers a great deal of confidence in the time-tested designs they outline.  Additionally, they provide a shared vocabulary among developers that greatly aids communication about complex topics.  Describing the exact kind of hamburger you want to a Burger King employee is difficult when you have to describe every single element of the meal, but it&amp;#39;s much easier when you can simply say &amp;quot;number 5&amp;quot; and you both know exactly what is being ordered.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What they changed:&lt;/strong&gt; How I design and discuss my software, both at the code and architecture level.&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;http://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052&quot;&gt;Working Effectively with Legacy Code&lt;/a&gt;&lt;/h2&gt;

&lt;table class='image alignright' width='232'&gt;&lt;tr&gt;&lt;td&gt;&lt;a href='http://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052'&gt;&lt;img src=&quot;http://www.nomachetejuggling.com/assets/legacycode-226x300.jpg&quot; width='226' height='300'/&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;My first job out of college was replacing a developer who had left the company, as the sole responsible engineer on a massive and extremely complex codebase.  Working in this codebase was terrifying, any change I made had the potential to break almost anything, and there was no way to test any changes without pushing a jar to the production system and watching it go.  I checked over every change I made about a thousand times, and hand-constructed little &lt;code&gt;public static void main&lt;/code&gt; classes just to instantiate classes and invoke methods, and then hand-check results.  I had never heard of unit tests at this point (evidently, neither had my predecessor), so everything was done with kid gloves.&lt;/p&gt;

&lt;p&gt;It wasn&amp;#39;t until 2 jobs later that I actually read &lt;em&gt;Working Effectively with Legacy Code&lt;/em&gt;, which describes exactly how to deal with systems like these.  The book explains how to take yourself from having no confidence in the codebase or your changes, to having complete confidence in them.  It&amp;#39;s not simply about how to effectively manage yourself in the hole you&amp;#39;ve found yourself in, but exactly the tactics you can use to dig yourself out of the hole.  It&amp;#39;s organized extremely well, indexed largely by actual complaints you might have about an inherited codebase.  If I&amp;#39;d read this book earlier, my first job experience would have been much less stressful, and much more rewarding.&lt;/p&gt;

&lt;p&gt;One important thing to realize is that &amp;quot;Legacy Code&amp;quot; doesn&amp;#39;t refer exclusively to million-line Cobol codebases.  As soon as code is written and deployed somewhere, it&amp;#39;s legacy code from that point forward.  Every codebase you&amp;#39;ve worked on that you didn&amp;#39;t write yourself as a greenfield project is a legacy codebase, and the methodology of the book will help.  Once upon a time in my career, inheriting another developer&amp;#39;s codebase was frightening for me, and I&amp;#39;d often react (as so many developers do) by immediately wanting to do a full-scale rewrite of any codebase that&amp;#39;s too complex for me to manage.  Thanks to this book, I have no problem inheriting code written by others, even if they&amp;#39;re no longer around.&lt;/p&gt;

&lt;p&gt;Moving to a new job is less intimidating to me now, and I often spend the first few months of my time somewhere new simply getting the scaffolding in place to make changes confidently later on, increasing unit test coverage and breaking code into smaller and more isolated chunks.  The full-scale rewrite is no longer the first tool I reach for in my toolbelt, it&amp;#39;s the last one, and I feel confident that I can refactor nearly any codebase into something I&amp;#39;m comfortable working on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What it changed:&lt;/strong&gt; How I feel about inherited codebases, and how I manage my confidence working with them.&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672&quot;&gt;Refactoring&lt;/a&gt; / &lt;a href=&quot;http://www.amazon.com/xUnit-Test-Patterns-Refactoring-Code/dp/0131495054/&quot;&gt;xUnit Test Patterns&lt;/a&gt;&lt;/h2&gt;

&lt;table class='image alignright' width='306'&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://www.nomachetejuggling.com/assets/refactoring_xunit-300x196.jpg&quot; width='300' height='196'/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I think most recent college graduates, myself included at the time, are &amp;quot;cowboy&amp;quot; coders.  I used to have all the changes in my head, and just tried to get them fed from my brain into the compiler as quickly as I could, before I forgot all the stuff I wanted to do.  Today, I cringe when I think about how many characters of code I&amp;#39;d type between actually running or testing my software; &amp;quot;waiting for the compiler is just going to slow me down, let me get all the code written first and then I&amp;#39;ll debug it!&amp;quot;&lt;/p&gt;

&lt;p&gt;Learning the technique of refactoring, in which you change the structure of code without changing the behavior, forces a mental split.  You realize that &amp;quot;coding&amp;quot; is really two jobs, and that structure and behavior should be altered and tested independently, never at the same time.  Martin Fowler&amp;#39;s &lt;em&gt;Refactoring&lt;/em&gt; is a collection of structure-but-not-behavior changes that really provides the toolset for a lot of other books on this list.  &lt;em&gt;Refactoring&lt;/em&gt; is so important that, depending on what language you work with, you may not even think you have to actually read it: your IDE probably supports many of the operations it describes out of the box.  Nonetheless, it is a critical read, as it puts the reader in the mindset to understand the two hats they must wear as a coder, and how to intentionally change from &amp;quot;coding&amp;quot; to &amp;quot;refactoring&amp;quot;.&lt;/p&gt;

&lt;p&gt;Of course, refactoring goes hand-in-hand with unit testing.  There are hundreds of books covering unit tests and test-driven development, but none of them that I&amp;#39;ve seen break things down as well as &lt;em&gt;xUnit Test Patterns&lt;/em&gt;.  The book covers everything a programmer needs to become a unit testing badass, how to work with mocks and stubs, how to recognize problem smells in tests, how to refactor tests, and tons more.  It&amp;#39;s not about a specific technology or tool, it&amp;#39;s about unit testing best practices in general, and my attitude toward testing and the kinds of tests I write are much improved because of it.&lt;/p&gt;

&lt;p&gt;Refactoring and testing are essential tools in the programmer&amp;#39;s toolchest, and these two books cover all of the mechanics and tools one needs to master those tools.  &lt;em&gt;Refactoring&lt;/em&gt; focuses on improving the structure of your code, &lt;em&gt;xUnit Test Patterns&lt;/em&gt; focuses on improving the structure of your tests, and your code and tests form a symbiotic bond of code quality.  These two books are, in a lot of ways, two sides of a very important coin.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What they changed:&lt;/strong&gt; How I approach altering existing code, and how I ensure I&amp;#39;ve done so correctly.&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;http://www.amazon.com/The-Passionate-Programmer-Remarkable-Development/dp/1934356344&quot;&gt;The Passionate Programmer&lt;/a&gt; / &lt;a href=&quot;http://www.amazon.com/Land-Tech-Love-Pragmatic-Life/dp/1934356263&quot;&gt;Land the Tech Job You Love&lt;/a&gt;&lt;/h2&gt;

&lt;table class='image alignright' width='306'&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://www.nomachetejuggling.com/assets/career_books-300x225.jpg&quot; width='300' height='225'/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Okay, I get it, I&amp;#39;m terrible at making these lists, and clearly should have just done a &amp;quot;Top 15&amp;quot; or something.  In any case, landing that first job out of college is tough, but eventually the day comes when it&amp;#39;s time to move on.  &lt;em&gt;The Passionate Programmer&lt;/em&gt; is largely about how to find the right kind of job for you, what to look for in tech companies, and how to manage the direction of your career.  It&amp;#39;s pretty high level, but full of extraordinarily important advice to ensure you find yourself at companies that fit you and that you fit into well.  &lt;em&gt;Land the Tech Job You Love&lt;/em&gt; is more about the mechanics of this process, how to write a resume, how to interview, how to negotiate a salary, and the like.  This is another situation where really two books are so closely related that they&amp;#39;d be better as a single larger book.&lt;/p&gt;

&lt;p&gt;These books helped give me confidence to understand the process of hunting for and getting a job as a programmer.  It completely shifted my mentality, from being the unqualified person begging a company to give me a job, to being a competent and capable engineer simply searching for a mutually beneficial fit.  It changed how I view the job hunt, and how I conduct myself in interviews.  After reading these books, I completely scrapped my entire resume and created a new one from scratch.&lt;/p&gt;

&lt;p&gt;In a lot of ways, these books inspired me to create this very blog, or at least adjust what I used it for.  I view my various online profiles as part of my &amp;quot;brand&amp;quot; and I think my viewpoint shift in this regard informs a great deal of what I post here, on twitter, and elsewhere.  Yes, even all the inappropriate swearing (companies should probably know what they&amp;#39;re getting into with me).  &lt;/p&gt;

&lt;p&gt;I have a lot of confidence about my career now, and I don&amp;#39;t live in fear of losing my job or being unable to find a new one.  I think about my career differently, as a very planned and deliberate thing, not just a series of jobs.  It makes me excited about my future as a programmer, rather than concerned and fearful, which is a liberating sensation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What they changed:&lt;/strong&gt; How I view and manage my career.&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;http://www.amazon.com/Apprenticeship-Patterns-Guidance-Aspiring-Craftsman/dp/0596518382/&quot;&gt;Apprenticeship Patterns&lt;/a&gt;&lt;/h2&gt;

&lt;table class='image alignright' width='234'&gt;&lt;tr&gt;&lt;td&gt;&lt;a href='http://www.amazon.com/Apprenticeship-Patterns-Guidance-Aspiring-Craftsman/dp/0596518382/'&gt;&lt;img src=&quot;http://www.nomachetejuggling.com/assets/apprenticeship-patterns-228x300.jpg&quot; width='228' height='300'/&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;em&gt;Apprenticeship Patterns&lt;/em&gt; isn&amp;#39;t really a patterns book as the name implies, but it&amp;#39;s content has been kind of shoehorned into the format, I assume to increase sales.  Ignoring that flaw, &lt;em&gt;Apprenticeship Patterns&lt;/em&gt; is the best book on Software Craftsmanship I&amp;#39;ve read, and I&amp;#39;ve read quite a few.  I actually recommend it above &lt;a href=&quot;http://www.amazon.com/Software-Craftsmanship-The-New-Imperative/dp/0201733862&quot;&gt;Pete McBreen&amp;#39;s Software Craftsmanship&lt;/a&gt;, because it covers pretty much everything useful from that book, but excises some of the more unrealistic or naive bits, as well as the extremely long and pointless section about salary.  &lt;em&gt;Apprenticeship Patterns&lt;/em&gt; is a bugfix release for &lt;em&gt;Software Craftsmanship&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This book was the one that made really see the value in the Software Craftsmanship movement, and truly embrace it.  I&amp;#39;ve written elsewhere about &lt;a href=&quot;http://www.nomachetejuggling.com/2013/02/02/brief-thoughts-on-software-craftsmanship/&quot;&gt;why I like the Software Craftsman title&lt;/a&gt;, but this was the book that convinced me to consider myself part of that crowd.  Software Craftsmanship isn&amp;#39;t just about what customers can expect from you, it&amp;#39;s about what your fellow developers can expect from you, and what you should expect from yourself.  It&amp;#39;s not just about writing clean code, it&amp;#39;s about having a clean career, if that makes any sense.&lt;/p&gt;

&lt;p&gt;I now put a much greater stress on my fellow engineers than I used to, and I care more about the team as a whole.  In a lot of ways, this book takes the practices and techniques of many other books on this list and codifies them into an over-arching set of guiding principles.  Software Craftsmanship as a movement can get a little culty at times, but I generally consider myself part of that cult, and I largely have this book to blame.  The night time is the right time.&lt;/p&gt;

&lt;p&gt;What&amp;#39;s especially great is this book is it&amp;#39;s been licensed under Creative Commons, and is now &lt;a href=&quot;http://chimera.labs.oreilly.com/books/1234000001813/index.html&quot;&gt;completely free on the web&lt;/a&gt;!  Cool!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What it changed:&lt;/strong&gt; How I view my responsibilities as a professional, and what I consider my true title.&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;http://www.amazon.com/Art-Agile-Development-James-Shore/dp/0596527675&quot;&gt;The Art of Agile Development&lt;/a&gt;&lt;/h2&gt;

&lt;table class='image alignright' width='234'&gt;&lt;tr&gt;&lt;td&gt;&lt;a href='http://www.amazon.com/Art-Agile-Development-James-Shore/dp/0596527675'&gt;&lt;img src=&quot;http://www.nomachetejuggling.com/assets/theartofagiledevelopment-228x300.jpg&quot; width='228' height='300'/&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The first job I had out of college was pure chaos.  No process, no estimation, no planning, nothing.  Generally someone from marketing would stop by a programmer&amp;#39;s cubicle and inform them that they just sold a few thousand dollars worth of seats based on a feature that didn&amp;#39;t exist yet, so how long would it take to implement it?  Being my first post-college job, I was in &amp;quot;sponge mode,&amp;quot; so I simply thought this was how it worked in the real world.  It wasn&amp;#39;t until my next job that I was introduced to Agile Development methodologies by way of Scrum, which was like mana from heaven.  I was hooked.&lt;/p&gt;

&lt;p&gt;My job after that was at a company that wasn&amp;#39;t just into Agile as a methodology, their core business was actually developing agile tools for other software shops to use.  The entire company lived and breathed agile, so knowing agile was the same as understanding the core company domain.  It would have been impossible to do my job without understanding agile, in more ways than one.  So when I first took the job, I decided I needed to read an Agile book to make sure I knew my stuff.  Based on the title, I picked up &lt;em&gt;The Art of Agile Development&lt;/em&gt;.  What I didn&amp;#39;t realize at the time was that there were a lot of different agile methodologies, and in fact this book wasn&amp;#39;t about Scrum, it was about XP.&lt;/p&gt;

&lt;p&gt;I became a die-hard XP programmer without even realizing it.  My first exposure to &amp;quot;XP Programming&amp;quot; was a failed experiment in college that ruined it for me, I never would have knowingly bought a book on XP.  But The Art of Agile Development changed how I do my job, it changed the processes I like to use when working with managers and other developers, and the practices I like to adhere to myself, such as Test-Driven Development, Spiking, Evolutionary Design, and the like.  What&amp;#39;s ironic is that I read this book to work at an agile company, only to find most of them disliked XP, and considered themselves Scrum only.&lt;/p&gt;

&lt;p&gt;What&amp;#39;s nice about XP is that it&amp;#39;s pretty individualistic.  You can employ XP principles as a developer while working within Scrum, Kanban, Crystal, Lean, or whatever else.  In fact, that&amp;#39;s exactly what wound up happening: a small contingent of developers at this company including myself began working in a more XP-style within the confines of the company&amp;#39;s Scrum processes, and our successes wound up infecting larger and larger groups of people until pretty much the entire engineering team was working similarly.  When the company switched from Scrum to Kanban, it had little effect on how we worked.&lt;/p&gt;

&lt;p&gt;Today, my preferred way of working is with XP-style practices within a Kanban-style process, and an enormous part of that is because of this book.  I wish I had a Kanban book to recommend as well to round this part of my list out, but 100% of my Kanban experience was gained on the job, with no books of any kind.  What&amp;#39;s more, having worked for three years at a company where agile was something bordering on a religion, I&amp;#39;m pretty burned out on the topic in general, so other process-centric books on my &amp;quot;to-read&amp;quot; list have found themselves migrated towards the bottom.  Nonetheless, in all of my reading, The Art of Agile Development was easily the most influential book on how I like to work.  This one is pretty subjective, as I&amp;#39;m pretty sure &lt;strong&gt;any&lt;/strong&gt; good XP book would have had the same effect, but this was the one that did it for me, so I had to include it here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What it changed:&lt;/strong&gt; How I like to work in terms of processes and practices.&lt;/p&gt;

&lt;h1&gt;Honorable Mentions&lt;/h1&gt;

&lt;p&gt;There are a number of books that I didn&amp;#39;t include in the above list, but that nonetheless had a large impact on my career.  This, of course, despite the fact that I completely cheated in my Top 10 and included more than ten books.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Presentation-Patterns-Techniques-Crafting-Presentations/dp/0321820800&quot;&gt;&lt;strong&gt;Presentation Patterns&lt;/strong&gt;&lt;/a&gt; - Only an honorable mention because it&amp;#39;s not &lt;em&gt;really&lt;/em&gt; about software development per se, but I&amp;#39;ve &lt;a href=&quot;http://www.nomachetejuggling.com/2013/06/10/book-review-presentation-patterns/&quot;&gt;written elsewhere&lt;/a&gt; about how this book changed my life and I have to include it somewhere in this post.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Pragmatic-Thinking-Learning-Refactor-Programmers/dp/1934356050&quot;&gt;&lt;strong&gt;Pragmatic Thinking and Learning&lt;/strong&gt;&lt;/a&gt; - Learn more about your brain than you ever realized you needed to know.  Though not specifically about programming, it&amp;#39;s a very programmer-centric view of the mind, and how one can best work with your own mind and improve your ability to think and learn.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683&quot;&gt;&lt;strong&gt;Effective Java&lt;/strong&gt;&lt;/a&gt; - I said I wasn&amp;#39;t going to include any technology-specific books, but I can&amp;#39;t help but mention &lt;em&gt;Effective Java&lt;/em&gt; somewhere.  I was programming in Java for years before reading this book, but afterwards I felt like a Java master.  I almost never work with pure Java anymore, instead largely using other JVM-compatible languages, but the Java I wrote before reading &lt;em&gt;Effective Java&lt;/em&gt; looks very different than the Java I wrote afterwards, and I definitely prefer the latter.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215&quot;&gt;&lt;strong&gt;Domain-Driven Design&lt;/strong&gt;&lt;/a&gt; - I&amp;#39;m such a blowhard, I haven&amp;#39;t even read this book and I&amp;#39;m listing it here.  I include it because I have a hunch that, once I read a DDD book, it will have as profound an impact on me as the other books on this list.  Unfortunately, I can&amp;#39;t get through this book, because I really dislike the writing and organization of it.  I&amp;#39;m eagerly awaiting the release of the &lt;em&gt;Head First Design Patterns&lt;/em&gt; to this book&amp;#39;s GoF, but so far it doesn&amp;#39;t seem to exist.  I had hoped &lt;a href=&quot;http://www.amazon.com/Implementing-Domain-Driven-Design-Vaughn-Vernon/dp/0321834577/&quot;&gt;Implementing Domain-Driven Design&lt;/a&gt; would be that book (so much so that I pre-ordered it), but alas it seems to assume the reader has already the original DDD book, so I&amp;#39;ll have to keep waiting.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So that&amp;#39;s my complete list.  I obviously have many, many more books to read, and I look forward to writing another list like this one in the future after being profoundly changed for the better some more.&lt;/p&gt;

&lt;p&gt;Have some books you want to add?  Feel like telling me one of my favorite books is inferior to one of yours?  Want to yell at me for not including &lt;a href=&quot;http://www-cs-faculty.stanford.edu/%7Euno/taocp.html&quot;&gt;&lt;em&gt;The Art of Computer Programming&lt;/em&gt;&lt;/a&gt; (come on, you never read that shit and you know it)?  Leave a comment!&lt;/p&gt;
</description>
				<pubDate>Wed, 05 Feb 2014 00:00:00 -0500</pubDate>
				<link>http://www.nomachetejuggling.com/2014/02/05/top-10-career-changing-programming-books/</link>
				<guid isPermaLink="true">http://www.nomachetejuggling.com/2014/02/05/top-10-career-changing-programming-books/</guid>
			</item>
		
			<item>
				<title>Diving Into Android</title>
				<description>&lt;p&gt;I&amp;#39;ve finally written my &lt;a href=&quot;https://play.google.com/store/apps/developer?id=Absolutely%20No%20Machete%20Juggling&amp;amp;hl=en&quot;&gt;first real Android app&lt;/a&gt;.  I dabbled a bit with Android development in the very early days, writing &lt;a href=&quot;https://code.google.com/p/rallydroid/&quot;&gt;an app that interacted with the web services&lt;/a&gt; of the company I was working for at the time.  This app was ugly, written for Froyo, and frankly barely worked at all.  It was a 20% time project at my then-employer, but I never went back and worked on it after the initial effort, and never even bothered getting it packaged into the Android Market, largely out of embarrassment.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve been wanting to get into Android development more seriously since that effort, because I overall liked the idea, and as a big Android user myself, I felt that it was essential &lt;em&gt;I be able to develop applications for my own device&lt;/em&gt;, as being unable to do so was a lot like using Linux without the ability to write shell scripts.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve taken two all-day training sessions on Android before as part of larger development conferences, and while I was able to suss out some basics about the lifecycle and other Android fundamentals from them, neither left me with any sense of real understanding of how I could develop something for Android that people might actually use.  But at &lt;a href=&quot;http://www.nomachetejuggling.com/2013/07/30/oscon-2013-a-review/&quot;&gt;OSCON 2013&lt;/a&gt;, I took an excellent half-day Android class taught by &lt;a href=&quot;https://twitter.com/markog&quot;&gt;Marko Garenta&lt;/a&gt;.  Among other things, he showed me, for the first time, how to write a modern-looking Holo app, how to use asynchronous background tasks, how to transition between multiple activities, and how to handle fragmentation issues.  These were never touched on in my all-day sessions, and they&amp;#39;re all large barriers to writing real applications.&lt;/p&gt;

&lt;p&gt;Once I left the class I had a sense that I actually now knew enough that, with some help from web searches, I could actually write an Android app.  I just needed a good idea, so &lt;strong&gt;I tried to take notice of various itches in my life to see if I could scratch any with a phone app&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;The Concept&lt;/h1&gt;

&lt;p&gt;After only a couple weeks, I found it.  I use various tools to track my gym workouts, but each one is vastly overcomplicated, attempting to be the &amp;quot;one fitness app to rule them all&amp;quot;, so I wind up using about 5% of many different apps to track my health.  This generally means navigating past features I don&amp;#39;t care about or working around features I dislike.  For example, when I go weightlifting all I want is to be able to track how much I lifted last time so I can increase it.  I generally do sets until failure, so one workout might have 5 sets, but then after I increase the weight I might only be able to do 3.  The program I use to track this, &lt;a href=&quot;https://play.google.com/store/apps/details?id=je.fit.pro&amp;amp;hl=en&quot;&gt;JEFIT Pro&lt;/a&gt;, demands I create workout routines consisting of certain exercises, then set each exercise to have a certain number of sets; it&amp;#39;s all very rigid, and I find myself fighting with the app constantly to get out of my way and just let me track my workouts.&lt;/p&gt;

&lt;p&gt;So this became my itch.  I wanted to write a very simple app that would:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Let me add my own exercises to a list (JEFIT has its own predefined, and there are about fifty billion to scroll through)&lt;/li&gt;
&lt;li&gt;Easily let me log sets with a weight and a number of reps&lt;/li&gt;
&lt;li&gt;Save those logs to a simple-to-read JSON file stored on my SD card&lt;/li&gt;
&lt;li&gt;When I pull up an exercise, go through these logs to show me previous records for the exercise, so I can ensure I&amp;#39;m increasing my weight&lt;/li&gt;
&lt;li&gt;Be a rest timer, counting down and alerting me when a rest is over after logging a set&lt;/li&gt;
&lt;li&gt;Work well in airplane mode (I usually use this at the gym to avoid getting phone calls and texts)&lt;/li&gt;
&lt;/ol&gt;

&lt;table class='image alignright' width='174'&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://www.nomachetejuggling.com/assets/Screenshot_2013-08-25-15-10-59-168x300.png&quot; width='168' height='300'/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In other words, &lt;strong&gt;a clipboard, piece of paper, pencil, and stopwatch, but on a phone&lt;/strong&gt;.  I didn&amp;#39;t want it to have any more features than this, because I felt that would risk it being another app that just gets in my way and tries to dictate how I should work out.  In fact, I specifically insisted that this app not even need internet permission, instead writing all log data out to the SD card for the user to sync however they please (I&amp;#39;m using &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.ttxapps.dropsync&amp;amp;hl=en&quot;&gt;Dropsync&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I came up with a name as simple as the idea: &lt;strong&gt;Simple Strength Log&lt;/strong&gt;.  I also decided that, should the experience be a positive one, I could go on to write similar apps to track fitness and write to simple JSON files, like Simple Cardio Log, Simple Food Log, Simple Water Log, Simple Weight Log, etc.  I like collecting data.&lt;/p&gt;

&lt;h1&gt;Development&lt;/h1&gt;

&lt;p&gt;Development of the app took me about one week.  I expected this to be a month-long project as I sputtered my way along unfamiliar territory, but honestly it wasn&amp;#39;t too bad.  With what I learned from the OSCON session, I was able to get some basic functionality working pretty quickly, and any time I had a question on how to do something, &lt;strong&gt;99.9% of the time there was a StackOverflow post addressing it&lt;/strong&gt;.  Basically I started development after work on a Friday, spent every waking hour of my weekend working on it, worked after hours (and sometimes during lunch) during the week, and had it done by the next Friday.  I took one more weekend with it before releasing, since a change I wanted to make was going to fundamentally alter the file format I was using, and it was simpler to wait than to release it and deal with parsing the legacy format.&lt;/p&gt;

&lt;p&gt;I used Eclipse for development, despite being an IntelliJ user, because we used Eclipse for the OSCON session and I wanted to hit the ground running.  &lt;strong&gt;I hated using Eclipse&lt;/strong&gt;, it&amp;#39;s even more clunky and annoying than I remember.  Obviously the keyboard shortcuts were unfamiliar, but honestly I find it to be a less capable IDE overall, and I found some of its quirks maddening.  One thing that happened constantly was I&amp;#39;d copy some code with Command-C, delete it, go somewhere to paste it, and it would paste the thing that was in my buffer previously, with the copy having been ignored.  I&amp;#39;d have to then undo the deletion, re-copy, re-delete, and re-paste.  And before you say I probably wasn&amp;#39;t hitting Command-C correctly or something, bear in mind that I use the clipboard like this in every application I use, including IntelliJ, and this only happens in Eclipse.  The Android tools themselves were great, particularly the wizard for creating Android XML files with different constraints, and the UI/Layout editor.  Hopefully I know enough now about Android that I can confidently use the new IntelliJ environment.&lt;/p&gt;

&lt;table class='image aligncenter' width='586'&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://www.nomachetejuggling.com/assets/Screen-Shot-2013-08-30-at-4.07.48-PM-580x423.png&quot; width='580' height='423'/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Overall, development went very smoothly.  I felt like there was an enormous mountain to climb in terms of my lack of knowledge, but that the learning curve wasn&amp;#39;t steep at all.  Most development felt very natural, often the way to do something was the way I&amp;#39;d expect to, so the principle of least surprise was satisfied.  &lt;strong&gt;I generally found that, if you were meant to do something, the Android API made it dirt simple to do, and if you weren&amp;#39;t, a StackOverflow post told you how&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Being able to write in Java definitely smoothed the process.  Being very familiar with Java and its conventions helped me move briskly through the development, I never had to think about language questions at all, focusing entirely on Android questions.  One thing that was tough was, I&amp;#39;m used to doing JVM development in languages like Scala or Groovy, and when I&amp;#39;ve done Java in recent years I&amp;#39;ve done so with the help of Java libraries that made it much easier to work with, like &lt;a href=&quot;http://commons.apache.org/proper/commons-lang/&quot;&gt;Apache Commons&lt;/a&gt; and &lt;a href=&quot;https://code.google.com/p/guava-libraries/&quot;&gt;Guava&lt;/a&gt;.  But each jar file I downloaded increased the size of my tiny little .apk file substantially, so I often hand-rolled methods that I normally don&amp;#39;t have to write.  I wound up only including a library if I used a number of functions from it, and managed to keep my binary (just barely) under 1 MB.&lt;/p&gt;

&lt;p&gt;The two biggest challenges were, by far, layout and managing state.  Layout was the easier of the two, largely because of the quality of the Eclipse tools.  Managing state was very tricky however, in that you basically have instance fields in your activities, but can&amp;#39;t trust that they have the values you think.  Assignment to and from these fields needs to happen through various lifecycle methods and, while there are diagrams that illustrate the flow, it&amp;#39;s sometimes difficult to know which lifecycle methods get called when, and it&amp;#39;s tricky to trace through these steps to ensure that data is where you expect it to be.  For example, if you call one activity from another, the lifecycle methods that get called on the parent differ depending on whether you return to it by hitting the &amp;quot;up&amp;quot; button on the action bar or hit the &amp;quot;back&amp;quot; button of your device.&lt;/p&gt;

&lt;table class='image alignleft' width='174'&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://www.nomachetejuggling.com/assets/Screenshot_2013-08-30-12-50-37-168x300.png&quot; width='168' height='300'/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Managing state was a particular challenge for this app, because I refused to store any persistent data inside of internal databases the way most apps do.  Instead, I wanted to read and write from a large collection of json files on the SD card, which means disk access on the slowest part of the phone, reading from a particularly slow-to-parse file format, and serializing/deserializing frequently.  In other words, &lt;strong&gt;my persistence and unpersistence operations were particularly slow&lt;/strong&gt;, and I had to take a lot of extra precautions to avoid working with them in the main UI thread to avoid the dreaded &amp;quot;Force Close&amp;quot; popup.&lt;/p&gt;

&lt;p&gt;Tracking down bugs due to my understanding of lifecycle methods and state management took the majority of my time developing.   Even now, my code is littered with an overabundance of null checks for extra safety.&lt;/p&gt;

&lt;p&gt;The other big challenge was layout and UI.  Simple layouts were very easy, particularly with the tools, but &lt;strong&gt;any time I wanted to be slightly complex or specific with my layout, it was a struggle&lt;/strong&gt;.  I love the ability to handle fragmentation and different screen sizes by making alternative xml layouts with the same component ids and specify &amp;quot;this layout is for landscape mode&amp;quot; or &amp;quot;this landscape is for large screens&amp;quot;.  That&amp;#39;s a cool feature and it makes things easy.  But any complex layout often wound up being a nightmare, with me being essentially forced to create lots of nested LinearLayouts with different weights.  The tool specifically warns me that this is bad for performance, but frankly it always works fine on my phone so I kind of ignored the warnings.  I really like the notion of defining behaviors in code and interface/strings/UI stuff in XML files, I held myself to preserving this separation even when I was having a tough time making something look right in XML.&lt;/p&gt;

&lt;p&gt;Often the UI didn&amp;#39;t work the way it seemed like it was supposed to.  For example, I wanted my ActionBar title to be a drop-down to select different filters for the exercise list (Favorites, Chest exercises, Leg exercises, etc).  When I implemented it the way the documentation indicated, it was impossible to properly set the text color to white, even though the title was white before (as specified by me in a style file) and the ActionBar background was dark.  I tried every manner of customization but was simply never able to find the magic incantation to make it work.  Additionally, the pop-up menu with the dropdown list was black on gray rather than white on black like the other pop-up menus.  Again, even with the help of StackOverflow, I was unable to figure out how to fix this, so &lt;strong&gt;I wound up writing a whole bunch of custom components to make it work right, which was annoying&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Another frustration I had was when I tried to create an AlertDialog with a NumberPicker inside.  No matter what I did, the Dialog background and NumberPicker foreground were both white, making it impossible to use.  I wound up completely re-designing my UI to work around this.  In the end, &lt;strong&gt;I like what I wound up with quite a bit more than my original plan&lt;/strong&gt;, but it was frustrating that I was unable to do something that the documentation gave me all indications I should be able to do.&lt;/p&gt;

&lt;p&gt;The Android SDK and related tools provide a way to run emulators of various devices for testing your apps, and I did this for a while but frankly found the whole process very slow.  In the end, &lt;em&gt;I wound up doing almost all development with my actual phone connected&lt;/em&gt;.  This was faster, gave me a more accurate sense of how the app would work, and frankly I got a kick out of seeing something I wrote on my actual phone that I use every day.  As a bonus, my phone always had the last version I tested on it, so I was easily able to test my app at the gym to work out kinks (get it? WORK OUT kinks? har har har) well before releasing it.  I also had a tablet that I tested on, but never ran the emulator again after using my phone, so I have no idea if my app works like shit on other devices.&lt;/p&gt;

&lt;table class='image alignright' width='174'&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://www.nomachetejuggling.com/assets/Screenshot_2013-08-25-15-11-33-168x300.png&quot; width='168' height='300'/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I dealt with the Android version fragmentation as poorly as I could have: &lt;strong&gt;screw you if you have an old phone&lt;/strong&gt;.  I would write code using specific features of the Android API, and whenever ADT would warn me that I was using an API that was newer than my target API, I just bumped my target API.  What originally started as an app that would work on Froyo quickly became an app that would work on Honeycomb, as I found the hoop-jumping needed to work around not having an ActionBar simply not worth the hassle.  Shortly after, I wound up wanting to use some simple function that required Ice Cream Sandwich as the target.  This function would have been easy to write on my own, but it was even easier to just bump my target API again.  Not exactly the tactic I&amp;#39;d take if I were doing Android professionally, but good enough for something I&amp;#39;m doing in my spare time.  Hey, I made a setting to let people switch from Imperial to Metric units even though I live in the U.S., what more do you people want from me?&lt;/p&gt;

&lt;p&gt;I wound up never writing a single test for my project, which is very much against my normal patterns of development.  I felt annoyed having to test and re-test my app my hand after making changes, but I found the unit testing stuff too difficult to set up, and my app too small to bother with.  I often wanted to just write simple unit tests against my &lt;code&gt;Util&lt;/code&gt; class, but the only way to test a single class is apparently to set an entire Test Project version of the app, and it was all too convoluted to bother with.  Maybe next time.&lt;/p&gt;

&lt;h1&gt;Publishing&lt;/h1&gt;

&lt;p&gt;Publishing the app to the store was pretty easy.  I had come under the false impression this involved getting certificates and other crazy crap, but it was much simpler than all that.  The documentation on the Android site was actually pretty confusing, but I eventually fumbled my way through creating a signed, zipaligned (that&amp;#39;s important) apk and getting it into the Play Store.&lt;/p&gt;

&lt;p&gt;Working with the Store is easy, updating your apps, changing the descriptions, &lt;strong&gt;all of that is cake&lt;/strong&gt;.  The web UI built around managing your Android Developer Console is one of Google&amp;#39;s best, definitely the easiest part of this whole process.&lt;/p&gt;

&lt;p&gt;In the end, I had &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.nomachetejuggling.ssl&amp;amp;hl=en&quot;&gt;an app in the Play Store&lt;/a&gt;.  Just seeing my own app in this store, searchable on the web or in the app, was a trip.  It was like seeing yourself on television.  This isn&amp;#39;t a place for me, it&amp;#39;s a place for professionals, but there I am!  My app!  My wife got such a kick out of it that she installed it and put it on her home screen, despite not using the gym.&lt;/p&gt;

&lt;p&gt;I released the app for free, and made the source available on GitHub &lt;a href=&quot;https://github.com/rodhilton/SimpleStrengthLog&quot;&gt;here&lt;/a&gt;.  In today&amp;#39;s Android ecosystem, this seems to be increasingly rare, it&amp;#39;s become a lot more like the App Store, with a lot of apps that cost $2, or have a free version with a $2 pro version key.  I rarely see Android apps open sourced anymore, but I did it anyway because when I first &lt;strong&gt;adopted&lt;/strong&gt; android, it was the norm.  And since it was one of the reasons why I decided I liked the Android ecosystem in generally and got my first Android device, I felt like I should preserve it.  The &lt;a href=&quot;http://www.engadget.com/2008/10/16/t-mobile-g1-review/&quot;&gt;T-Mobile-G1&lt;/a&gt;-buying version of me would have wanted me to keep it open.&lt;/p&gt;

&lt;h1&gt;Android in my Future&lt;/h1&gt;

&lt;p&gt;I really enjoyed my Android experience.  In fact, I set about writing the followup, &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.nomachetejuggling.scl&amp;amp;hl=en&quot;&gt;Simple Cardio Log&lt;/a&gt;, and completed it in about 4 days, largely stealing a lot of code from Simple Strength Log.  While developing it, I learned a bit more, especially about the Android UI, that I wound up backporting back into the Strength Log.&lt;/p&gt;

&lt;table class='image alignright' width='174'&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://www.nomachetejuggling.com/assets/Screenshot_2013-08-29-21-07-13-168x300.png&quot; width='168' height='300'/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I definitely intend on doing more Android development.  I do indeed plan to write the followup apps like Simple Food Log (my next one) and maybe even a non-free apps that work with the output files.&lt;/p&gt;

&lt;p&gt;I now feel about my phone the way I feel about my desktop machines, in the sense that if I have an issue on the device I want to solve, I feel competent being able to write software that runs on it to solve the problem.  I&amp;#39;ve already responded to a few complaints my wife has made about various things with &amp;quot;maybe I&amp;#39;ll write a tiny Android app for you to fix that.&amp;quot;  I&amp;#39;ve even inquired a bit at work about which team works on my company&amp;#39;s Android apps, to consider if I&amp;#39;d like to work on them as well (yeah, my company is so large I literally don&amp;#39;t even know who works on the Android apps).&lt;/p&gt;

&lt;p&gt;Android is a fun platform to develop on, and it&amp;#39;s come a long way since I first tried back in the days of Froyo.  It&amp;#39;s a lot easier to write good-looking apps now, utilizing Android APIs to implement common patterns on the Android platform.  There is now a wealth of information out there, with tons of books and the indispensable &lt;a href=&quot;http://stackoverflow.com/questions/tagged/android&quot;&gt;StackOverflow&lt;/a&gt;, which is a welcome shift from when I first wanted to write an Android app and there were only 3 books on the subject, all out of date by the time I got them.  The Android platform is stabilizing and maturing, and the documentation is reaching a point where it&amp;#39;s actually almost helpful, so writing an app was a lot more fun than I expected going in.&lt;/p&gt;

&lt;p&gt;When all done, I had a whole bunch of new knowledge under my belt for writing applications, I have a skill I can add to my resume, a field that I&amp;#39;d definitely consider in future employment and, best of all, I finally have apps to track my workouts on my phone.&lt;/p&gt;
</description>
				<pubDate>Fri, 30 Aug 2013 00:00:00 -0400</pubDate>
				<link>http://www.nomachetejuggling.com/2013/08/30/diving-into-android/</link>
				<guid isPermaLink="true">http://www.nomachetejuggling.com/2013/08/30/diving-into-android/</guid>
			</item>
		
			<item>
				<title>OSCON 2013: A Review</title>
				<description>&lt;p&gt;This year, I went to O&amp;#39;Reilly&amp;#39;s Open Source Convention, &lt;a href=&quot;http://www.oscon.com/oscon2013&quot;&gt;OSCON&lt;/a&gt;.  Every year for the last four years, I&amp;#39;ve gone to a big tech conference.  For the last three, I went to NoFluffJustStuff, which was later renamed &lt;a href=&quot;http://uberconf.com/&quot;&gt;UberConf&lt;/a&gt;.  UberConf is held in my home state, I can drive to it from my house every day so there&amp;#39;s no plane or hotel involved, which makes it inexpensive enough that I&amp;#39;ve been able to get my employers to pay for it.  However, due to having attended UberConf consecutively for three years, last year I&amp;#39;d seen about half the sessions already either in previous years on at local Java User Group meetings, so I decided that this year I&amp;#39;d try something different.&lt;/p&gt;

&lt;p&gt;OSCON was a radical departure for me.  UberConf is a &amp;quot;Java/Agility&amp;quot; conference, and since I work almost exclusively with the JVM in an Agile environment, it&amp;#39;s more or less custom-tailored to my interests.  OSCON, however, had a huge variety of different tracks and a similarly varied group of attendees.  There were Python folks, Ruby folks, hardware hackers, system admins, operations gurus, cloud nerds, data geeks, perl wonks, and more.  I picked OSCON because, while the variety was less tailored to my interests, the sheer number of tracks (18 concurrent sessions per time slot!) made up for it.&lt;/p&gt;

&lt;table class='image aligncenter' width='586'&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://www.nomachetejuggling.com/assets/IMG_20130721_145702-580x435.jpg&quot; width='580' height='435'/&gt;&lt;p class='caption'&gt;OSCON!&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Here is my review of the OSCON experience.  OSCON was the first conference I&amp;#39;ve been to outside of my home state, and really the first one not run by the Rocky Mountain Software Symposium.  As such, it will be unavoidable that I will be comparing it largely to my UberConf experience, since it&amp;#39;s my only real frame of reference.  I will try to address each element of the conference separately.&lt;/p&gt;

&lt;h1&gt;Sessions&lt;/h1&gt;

&lt;p&gt;First thing&amp;#39;s first, how were the sessions?  I don&amp;#39;t go to tech conferences to network or hand out business cards, though I hear that&amp;#39;s half the point.  I treat conferences like an intense week of school, I take notes and try to learn as much as I can in the sessions.  A tech conference&amp;#39;s quality is going to be 95% the quality of the sessions for me, so they&amp;#39;re the most important thing by far.&lt;/p&gt;

&lt;p&gt;As I mentioned earlier, I was initially worried that the lack of narrow focus on my area of work would make it difficult to find sessions I wanted to attend.  For the most part, this wound up not being the case.  I actually really enjoyed being able to venture out of my typical comfort zone and, while most of my sessions did still revolve around the JVM, I attended a few sessions about Google Go, Hadoop, Android development, ops, Erlang, vim, JavaScript, mathematics, Arduino, and NoSQL.  I probably learned more from the JVM-related sessions, but it was fun to attend some of these sessions and learn about stuff I&amp;#39;m not normally exposed to.&lt;/p&gt;

&lt;p&gt;Only a few times did this wide focus hurt my session-taking ability.  One example that comes to mind was a talk on how to keep long-running server applications alive.  The topic sounded interesting, and at a JVM-focused conference this would have probably been about JVM tuning, garbage collection tweaking, Tomcat, and similar topics.  Here it was all about server daemons, cron jobs, signal interceptions, and the like.  I was bummed because I liked the idea of the talk but the technology it applied to was too far out out my zone of usefulness that I skipped it.  Another talk that seemed interesting used Erlang as the basis language, and having never used it, I was worried the talk would be over my head in detail so I skipped that too.  These occurrences were rare, but frustrating.&lt;/p&gt;

&lt;table class='image alignleft' width='306'&gt;&lt;tr&gt;&lt;td&gt;&lt;a href='http://www.flickr.com/photos/oreillyconf/9356688516/in/set-72157634769772086'&gt;&lt;img src=&quot;http://www.nomachetejuggling.com/assets/oscon_session-300x200.jpg&quot; width='300' height='200'/&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;One thing lacking were &amp;quot;agility&amp;quot;-based talks.  I actually liked this, I&amp;#39;ve found that almost every talk I&amp;#39;ve ever attended on something related to agile is really high-level and borderline useless.  They always tend to be like &amp;quot;you should read this book, it&amp;#39;s good&amp;quot; and full of a lot of filler or academic advice.  Having virtually no talks like that cleared space for more technical talks, which are the kind I enjoy more, so I appreciated that.  I think someone that enjoys talks like that might have had a tougher time at OSCON, but I enjoyed it.&lt;/p&gt;

&lt;p&gt;One thing of significant note is session length.  At UberConf, all of the sessions are 90 minutes, but all of OSCON&amp;#39;s sessions were 40 minutes.  The longer sessions mean that a 6-session day goes from 8:30 AM to 10 PM, which basically means your brain is too exhausted to learn anything in the last session.  I&amp;#39;ve often felt like speakers doing 90 minute sessions were padding their talks, but OSCON sessions have the opposite problem: the talks often felt too short, and it was clear that speakers struggled to make some of their talks fit into 40 minutes.  Often sessions would run long or get cut off just when they were getting good.  On the upshot, it almost never felt like there were any filler moments, picking a bad session was only a 40 minute cost, and the day ended before my brain gave out, which was good.  I think I&amp;#39;d like to see sessions that are 60 minutes, it seems like such a length would avoid the problem of the too-short 40 minutes and the too-long 90.  &lt;/p&gt;

&lt;p&gt;The number of parallel tracks was excellent.  There was only one time slot where none of the sessions excited me, every other time slot forced me to choose between 2 or 3 that I really wanted.  That&amp;#39;s a great problem to have.  I like choice.&lt;/p&gt;

&lt;table class='image alignright' width='306'&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://www.nomachetejuggling.com/assets/picard-facepalm-300x197.jpg&quot; width='300' height='197'/&gt;&lt;p class='caption'&gt;Not this 'not this shit again' shit again.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;One thing I have to complain about is a trend I&amp;#39;m noticing in more and more talks.  This was present at UberConf last year, I see it in User Group talks, and it was out in spades at OSCON.  &lt;strong&gt;People putting stupid meme image macros in their slides&lt;/strong&gt;.  Dumb pictures of rage comic faces, grumpy cat, tired old memes that I&amp;#39;ve seen reposted to reddit about a billion times.  I saw the &lt;a href=&quot;http://knowyourmeme.com/memes/facepalm&quot;&gt;Picard facepalm image&lt;/a&gt; three separate times.  It was like a damn &amp;quot;applause&amp;quot; sign for a sitcom studio audience, whenever the speaker needed a quick chuckle, something would pop up with huge Impact font.  I unsubscribed from every default subreddit to get away from this hackneyed, unfunny crap, why do so many speakers feel compelled to put this &amp;quot;omg guise I&amp;#39;m on reddit too!!!&amp;quot; narwhal baconing crap in their slides? Grr.&lt;/p&gt;

&lt;p&gt;Overall, the talks were great.  I took a ton of notes, and learned a whole bunch of stuff.  Good speakers with lots of good information.  I would always like to see a wider selection of advanced talks available, but what was offered was definitely high quality.&lt;/p&gt;

&lt;h2&gt;Workshops&lt;/h2&gt;

&lt;p&gt;One thing present at OSCON that I was used to from UberConf was a separate day set aside for extra-long sessions.  Generally called &amp;quot;Workshops&amp;quot; these are intended to be more hands-on sessions where you focus on learning a specific thing with the help of a teacher.  At UberConf, there are two types of workshops: 9-hour, all-day sessions with a single topic, and workshops during during the regular week that just take up 2 slots back-to-back for a total of 3 hours.  At OSCON, there are two full days set aside for workshops, which are 3 hours and 30 minutes each, two workshops per day.&lt;/p&gt;

&lt;p&gt;I actually like the all-day format of UberConf&amp;#39;s Tuesday workshops the most, because a full day really is enough time to thoroughly learn something.  Of the shorter variety, I preferred OSCON&amp;#39;s workshop format, simply because they were all separated to their own workshop days. Having workshops in the middle of the week means that you&amp;#39;re giving up two sessions to take the workshop, and every year I&amp;#39;d have multiple occurrences of wanting to attend a particular session but having it conflict with half of a workshop.&lt;/p&gt;

&lt;p&gt;That being said, &lt;strong&gt;many&lt;/strong&gt; of these workshops (at both conferences) suffer from the same basic problem, that speakers who don&amp;#39;t want to invest the time in actually running a workshop simply use them as a place to give super-long talks.  Here&amp;#39;s the deal: if I&amp;#39;m not typing code into my laptop, it&amp;#39;s not a workshop, it&amp;#39;s just a really long lecture.  Too many times at both UberConf and OSCON I have attended a workshop that was really just an excuse to include more slides.  And every time that happens, I get bored halfway through and my attention wanders.&lt;/p&gt;

&lt;p&gt;I attended the Android workshop at OSCON this year and it went extremely well, we jumped right into Android development, I actually learned more at it than at BOTH of the full-day, 9-hour Android workshops I attended in previous years combined.  I also attended a workshop on Google Go that wound up just being a group follow-along of the &lt;a href=&quot;http://tour.golang.org/&quot;&gt;Google Go tour&lt;/a&gt;, which disappointed me a bit so I bailed and went to the Hadoop talk, which wound up just being a really long slide lecture.  I learned a lot at both of these talks actually, but I don&amp;#39;t know that I&amp;#39;d have classified either of them as &amp;quot;Workshops&amp;quot;.  I also attended workshops on Clojure and Erlang - both of these were largely just lectures, with some encouragement to type what you see in the slides in a REPL.  Again, I learned a lot and really enjoyed them, but I&amp;#39;d still hesitate to call them workshops.&lt;/p&gt;

&lt;h1&gt;Keynotes&lt;/h1&gt;

&lt;p&gt;Another huge difference from what I&amp;#39;m used to was the Keynote style.  I&amp;#39;m used to a 60 minute keynote presentation during dinner.  OSCON had a series of 10-minute keynotes first thing in the morning, before any sessions.  These keynotes covered all sorts of stuff (&amp;quot;open source&amp;quot; is a pretty wide umbrella).&lt;/p&gt;

&lt;p&gt;We got to see an &lt;a href=&quot;http://www.youtube.com/embed/Ty9QDqV-_Ak?autoplay=1&quot;&gt;AR drone being controlled by Clojure&lt;/a&gt; (I want one), hear about choosing licenses for GitHub projects, learn about the &lt;em&gt;cough&lt;/em&gt;total-bullshit&lt;em&gt;cough&lt;/em&gt; We The People project, and Piers Cawley showed up to &lt;a href=&quot;http://www.youtube.com/watch?v=YNeTBKyrHeY&amp;amp;t=1m49s&quot;&gt;sing a song about space&lt;/a&gt; and, I&amp;#39;m pretty sure, &lt;a href=&quot;http://www.youtube.com/watch?v=YNeTBKyrHeY&amp;amp;t=4m41s&quot;&gt;chastise us for swearing too much&lt;/a&gt;.&lt;/p&gt;

&lt;table class='image alignleft' width='306'&gt;&lt;tr&gt;&lt;td&gt;&lt;a href='http://www.flickr.com/photos/oreillyconf/9363469980/in/set-72157634769772086'&gt;&lt;img src=&quot;http://www.nomachetejuggling.com/assets/oscon_keynotes-300x200.jpg&quot; width='300' height='200'/&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Overall, I liked the short-format Keynotes.  I think the longer keynotes have to be extremely broad and high-level to be applicable to everyone in attendance, which generally means they&amp;#39;re not technical at all so I hate them.  The 10-minute keynote format meant that a whole bunch of different speakers could talk on different topics which actually allowed them to be more technical and interesting.&lt;/p&gt;

&lt;p&gt;Most importantly, all of the Keynotes were streamed live, which meant I could sleep in and watch them in my hotel room before heading to the convention center.  Oh plus I can share them with people and blah blah blah.  Point is, keynotes in my pajamas.  Awesome.&lt;/p&gt;

&lt;h1&gt;Expo Hall&lt;/h1&gt;

&lt;p&gt;One thing that was totally new to me was the Exhibition Hall at OSCON.  As the name implies, the &amp;quot;No Fluff, Just Stuff&amp;quot; conference series prides itself on a minimum level of sponsorship, so there were never trade booths or anything like that.&lt;/p&gt;

&lt;p&gt;I actually had no problem with the expo hall, in fact I really enjoyed it.  I was never forced to go there, I never had to walk through it to get somewhere, and any sponsored session was clearly labeled as such.  I was frequently &lt;em&gt;enticed&lt;/em&gt; to go to the expo hall because often the snacks and goodies were there (but not meals), but it was always optional.  I had a good time, I got to look at some cool stuff in the booths, and I collected a ton of little trinkets and stickers plus a whopping &lt;strong&gt;25 T-shirts&lt;/strong&gt;.  No kidding, 25.&lt;/p&gt;

&lt;p&gt;OSCON also ran this puzzle game, where you had to collect all of these little puzzle pieces and the first 500 people to finish the puzzle got an OSCON sweatshirt and were entered into a drawing for prizes.  The only way to get most of the puzzle pieces was by visiting specific vendor booths.  I really wanted the sweatshirt, so I took this game really, really seriously.  Like, &lt;strong&gt;way too seriously&lt;/strong&gt;.  Okay, I actually walked to a Walgreen&amp;#39;s and bought a bottle of glue so that I could glue down all of my pieces on Tuesday night so that when I collected the final piece from attending the Wednesday morning keynotes, I could immediately run to the registration booth and turn in my puzzle.  They were still unboxing the sweatshirts when I turned mine in, I think I wound up being the first person done.  I was worried that everyone was going to take it super seriously and I wouldn&amp;#39;t get the sweatshirt, and I figured pre-gluing my puzzle would give me an edge over anyone just starting to assemble the puzzle after getting the last piece.  In retrospect, I was being a complete psychopath, because people were still completing their puzzles Thursday night and getting sweatshirts, so clearly I&amp;#39;m an insane person.&lt;/p&gt;

&lt;table class='image alignright' width='306'&gt;&lt;tr&gt;&lt;td&gt;&lt;a href='http://www.flickr.com/photos/oreillyconf/9353919205/in/set-72157634769772086'&gt;&lt;img src=&quot;http://www.nomachetejuggling.com/assets/oscon_expo-300x200.jpg&quot; width='300' height='200'/&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I really enjoyed the Expo Hall, I found myself kind of wandering around it whenever I had some time to kill, or checking it out just before leaving for the day to see if there were any extra goodies.  I didn&amp;#39;t even get too heavily marketed to, I only occasionally got stuck listening to a marketing spiel while waiting for a T-Shirt. On one occasion I was told by a Rackspace representative that the only way to get the shirt was to play a game, but when I looked at the game it looked like some kind of Wii-like activity on a big TV screen in front of approximately eighty billion people.  I said nevermind and started to walk away, dejected, which kind of saddened me because I actually wanted a Rackspace shirt due to already &lt;strong&gt;being&lt;/strong&gt; a Rackspace customer and liking the product.  As I started leaving, a different representative said &amp;quot;I&amp;#39;ll give you a shirt man, what size?&amp;quot; and gave me a shirt without making me act like an idiot in the middle of the huge expo hall.  Thanks, random Rackspace dude, I don&amp;#39;t know why a company would make someone jump through hoops for the honor of becoming a walking billboard for that company for free.&lt;/p&gt;

&lt;p&gt;Two humorous standouts at the expo hall were GM and Microsoft.  GM was there to showcase... actually, I have no idea why the hell GM was there.  But they had a big fancy car in the middle of the hall, some luxury sportscar that you could sit in if you wanted to, I dunno, feel what it would be like to own a nice car?  Anyway, someone tweeted about how misguided it was to bring a big gas-guzzler to an Open Source convention instead of some green hybrid-type deal.  I thought that was funny, but not nearly as funny as Microsoft for setting up a booth with a bunch of Windows Phones on display.  Yeah Microsoft, I&amp;#39;m not sure the Open Source crowd is exactly your target market for a device running Windows of all things.  Literally across from them was the Ubuntu booth with a couple of &lt;a href=&quot;http://www.indiegogo.com/projects/ubuntu-edge&quot;&gt;Edge prototypes&lt;/a&gt;.  There was usually a line to see the Edge.&lt;/p&gt;

&lt;h1&gt;Attendees&lt;/h1&gt;

&lt;p&gt;I wish I had a lot to say about the crowd at OSCON, but I don&amp;#39;t.  A colleague of mine warned me that he&amp;#39;d been before and that the crowd was &amp;quot;neckbeardy&amp;quot; but I didn&amp;#39;t notice much difference between them and the UberConf crowd.  Lots of nerdy T-Shirts, and overall far too much facial and body hair in general, but the crowd didn&amp;#39;t strike me as obnoxious.  I am glad I decided not to pack my &lt;a href=&quot;https://supporters.eff.org/shop&quot;&gt;EFF T-Shirt&lt;/a&gt;, which almost looked like some kind of a uniform with this crowd.&lt;/p&gt;

&lt;table class='image alignleft' width='306'&gt;&lt;tr&gt;&lt;td&gt;&lt;a href='http://www.flickr.com/photos/oreillyconf/9360697295/in/set-72157634769772086'&gt;&lt;img src=&quot;http://www.nomachetejuggling.com/assets/oscon_lunch-300x200.jpg&quot; width='300' height='200'/&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Everyone seemed smart and very passionate about their particular areas of interest.  One neat thing OSCON had were these networking ribbons you could pick up with the names of things you might like (&amp;quot;Perl&amp;quot;, &amp;quot;Java&amp;quot;, &amp;quot;Big Data&amp;quot;, etc.) and attach them to your conference badge; O&amp;#39;Reilly also set aside a number of labeled tables at lunch for like-minded folks to gather together and geek out.&lt;/p&gt;

&lt;p&gt;I saw an awful lot of people wearing Google Glass.  I realized that photos really don&amp;#39;t do Glass justice, you have to see it in person just to realize how ridiculous someone looks wearing those things.  Seriously though, I felt myself feeling &lt;em&gt;extremely&lt;/em&gt; paranoid whenever someone wearing one was even looking in my direction, like I very well may be getting put into a photo or video.  I actually disliked being &lt;em&gt;looked at&lt;/em&gt; by someone wearing Glass.  I really hate it.  Also, I really want one.&lt;/p&gt;

&lt;p&gt;Overall, everyone was very friendly.  Everyone but me, that is.  I&amp;#39;m not friendly, and thus went out of my way not to really talk to anyone or network.  It&amp;#39;s how I roll.&lt;/p&gt;

&lt;h1&gt;Venue&lt;/h1&gt;

&lt;p&gt;UberConf is typically held in the conference rooms of a large hotel, but OSCON was held at the &lt;a href=&quot;http://www.oregoncc.org/&quot;&gt;Oregon Convention Center&lt;/a&gt;.  I believe this allowed OSCON to definitely have more rooms overall, but both locations have always been very comfortable.&lt;/p&gt;

&lt;p&gt;UberConf sessions almost always have rows of tables with chairs, good for laptops and notetaking.  Aside from the workshops, I don&amp;#39;t think any of the OSCON sessions had tables set up, everything was just chairs, and they were pretty cramped.  Sometimes this made notetaking difficult, but I will say OSCON did a generally better job of having sufficient power available, I almost never struggled to find a place to plug in my laptop.  I&amp;#39;m glad I brought my laptop for notes instead of my tablet, which requires a flat service to prop up and type on.&lt;/p&gt;

&lt;p&gt;A couple things irked me a little bit about the venue staff at OSCON.  I frequently saw A/V staff being condescending and rude to speakers who were trying to get set up, as if they were annoyed the speakers didn&amp;#39;t know more about microphones and video equipment.  They did a good job of making sure the projection systems worked and the speakers were clear over the audio system, but whenever they had to basically do anything at all many of them would take this sarcastic tone of voice when talking to the speakers.  It was weird.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m pretty sure the A/V crew is contracted out by the convention center, not actual center employees, but the actual convention center staff could be kind of annoying as well.  Frequently convention center staff would harass people for sitting on the floor in overfull rooms, or turn people away from popular sessions for having too many people.  In one instance one of the staffers guarding entry to a room told me the speaker wasn&amp;#39;t there yet and he&amp;#39;s not supposed to let me in because they might want a few minutes to get set up with the room empty.  Why?  I also got turned away from entering the expo hall to get a missing puzzle piece at 9:59 because the hall didn&amp;#39;t open until 10.  He literally watched his phone tick over to 10:00 before letting me through.  Chill out man, you&amp;#39;re not guarding the president.&lt;/p&gt;

&lt;p&gt;The food was good, too.  Pretty much convention buffet food, not many choices at lunch but the quality was decent.  This may sound strange, but I appreciated that the venue only supplied lunch, whereas UberConf typically provides breakfast, lunch, and dinner.  It made it much easier to follow my diet, which I guess is a weird thing to appreciate, but this is my dumb blog and I liked it.&lt;/p&gt;

&lt;p&gt;The Convention Center was located in Portland, right near a public transit rail line, and the convention included a ticket.  I didn&amp;#39;t rent a car and instead took the transit system everywhere, which was pretty convenient.  I walked from my hotel to the convention center every day; I even took a break back in my room to drop off some of those shirts because they were weighing me down.  I was also walking distance to a movie theater, where I went to catch a movie and wind down one night.  I felt safe everywhere, though when I checked into the Denny&amp;#39;s across from my hotel on Foursquare for breakfast one morning, I noticed someone complaining that it wasn&amp;#39;t open 24 hours a day, with a response posted &amp;quot;LOL, you be willing to work in that part of town at 3am and we&amp;#39;ll talk.&amp;quot;  What the hell part of town was I in?&lt;/p&gt;

&lt;p&gt;Sticking with public transit made it difficult to attend the various parties being thrown by tech companies in the area, so I didn&amp;#39;t go to any of those.  It would have been nice for there to be buses or something, but frankly I didn&amp;#39;t stay at the actual O&amp;#39;Reilly party that was &lt;strong&gt;at&lt;/strong&gt; the convention center for more than 10 minutes, so I can&amp;#39;t honestly say I&amp;#39;d have used them.&lt;/p&gt;

&lt;p&gt;Overall, Portland is a cool place for a convention and the convention center was a cool venue with a lot of rooms.  I missed being able to come home in the evenings, but I liked the convenience of the location and the proximity to my hotel, plus how quickly and easily I was able to get to lots of good restaurants and the like.&lt;/p&gt;

&lt;h1&gt;Misc&lt;/h1&gt;

&lt;p&gt;One neat touch of OSCON that I enjoyed was the personalized schedule.  One of my biggest challenges with these conferences is figuring out which sessions to go to, I often print out the schedules and use an elaborate system of markings to indicate preferences and possible substitutions, it&amp;#39;s all very A Beautiful Mind.  OSCON allows you to log in and actually mark sessions right there on the site.  What&amp;#39;s more, you can subscribe to an iCal feed of your personalized schedule, and you can sync it to a special OSCON smartphone app that displays the rooms for the sessions and can be set to notify you before they start.  Freaking cool.&lt;/p&gt;

&lt;table class='image aligncenter' width='586'&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://www.nomachetejuggling.com/assets/IMG_20130727_205308-e1375128008444-580x494.jpg&quot; width='580' height='494'/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I really had a great time at OSCON, I&amp;#39;m very glad I went.  I do wish for something that&amp;#39;s a bit more of a happy medium between OSCON and UberConf, with one-hour sessions, and I really wish these conventions would start putting the hammer down on what allows a session to be called a &amp;quot;workshop&amp;quot;, but I definitely enjoyed the experience and I hope to go again next year.&lt;/p&gt;
</description>
				<pubDate>Tue, 30 Jul 2013 00:00:00 -0400</pubDate>
				<link>http://www.nomachetejuggling.com/2013/07/30/oscon-2013-a-review/</link>
				<guid isPermaLink="true">http://www.nomachetejuggling.com/2013/07/30/oscon-2013-a-review/</guid>
			</item>
		
			<item>
				<title>Brief Thoughts on Software Craftsmanship</title>
				<description>&lt;p&gt;To catch people up on some blogosphere drama:&lt;/p&gt;

&lt;p&gt;Last month, Heather Arthur posted on her blog about an unfortunate incident in which some people on Twitter had found some &lt;a href=&quot;https://github.com/harthur/replace&quot;&gt;code she wrote in GitHub&lt;/a&gt;, and &lt;a href=&quot;http://harthur.wordpress.com/2013/01/24/771/&quot;&gt;people started trashing her on Twitter for it&lt;/a&gt;.  Some of those people are considered leaders in the &lt;a href=&quot;http://manifesto.softwarecraftsmanship.org/&quot;&gt;Software Craftsmanship&lt;/a&gt; movement, in particular &lt;a href=&quot;http://coreyhaines.com/&quot;&gt;Corey Haines&lt;/a&gt;.  Corey immediately &lt;a href=&quot;http://programmingtour.blogspot.com/2013/01/im-sorry.html&quot;&gt;apologized&lt;/a&gt; for acting like an asshole, and I think his apology was sincere because I&amp;#39;ve met Corey and frankly the guy is almost annoyingly nice (he went around RubyConf 2012 taking a picture with every damn person there).  But Ted Neward saw this turn of events and concluded that Corey&amp;#39;s actions were not orthogonal to his involvement in Software Craftsmanship, but actually influenced by them, and he &lt;a href=&quot;http://blogs.tedneward.com/2013/01/24/On+The+Dark+Side+Of+Craftsmanship.aspx&quot;&gt;posted as such on his blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Neward&amp;#39;s basic point is that this is the exact kind of behavior we should expect as a side effect of the Software Craftsmanship movement.  By it&amp;#39;s nature, it attempts to create a segregation between those who are &amp;quot;in the know&amp;quot; and those who are not, and he felt the behavior of Corey and others was a byproduct of this segregation.  They saw Heather as an &amp;quot;other&amp;quot; and were overly harsh in their criticisms, emboldened in so doing by their sense of Craftsmanship.  Neward took a lot of shit for this view on Twitter, with most people arguing that this was done by Software Craftsmen, but it wasn&amp;#39;t done &lt;strong&gt;because&lt;/strong&gt; they were Software Craftsmen, and it makes no sense to criticize the entire movement based on the action of a few members, regardless of how high their profile is.  Neward responded to all of this feedback in &lt;a href=&quot;http://blogs.tedneward.com/2013/01/26/More+On+Craftsmanship.aspx&quot;&gt;a second blog post&lt;/a&gt;, where he reinforces his original point.&lt;/p&gt;

&lt;p&gt;Uncle Bob Martin, one of the first five signers of the Software Craftsmanship Manifesto and author of Clean Code and The Clean Coder, then responded to all of this drama with &lt;a href=&quot;http://blog.8thlight.com/uncle-bob/2013/01/30/The-Craftsman-And-The-Laborer.html&quot;&gt;his own post&lt;/a&gt;.  Bob takes particular issue with Neward&amp;#39;s promotion of what he sees as the opposite of a Software Craftsman, a Software Laborer.  In Neward&amp;#39;s words, a Laborer is someone &amp;quot;who cranked out one crappy app after another in (what else?) Visual Basic [...] their apps were sloppy, bloated, and ugly...cut-and-paste cobbled-together duct-tape wonders.&amp;quot;  At the end of the post, Neward bows &amp;quot;with respect to the &amp;quot;software laborers&amp;quot; of the world, who churn out quality code without concern for &amp;quot;craftsmanship&amp;quot;, because their lives are more than just their code.&amp;quot;&lt;/p&gt;

&lt;p&gt;Bob finds these kinds of developers to be problematic, as his experience suggests that people who make a mess of their code create lots of defects and headaches for themselves and other developers.  Finally, Ted Neward responded to Bob as well with one more defense of himself in &lt;a href=&quot;http://blogs.tedneward.com/2013/02/02/Last+Thoughts+On+Craftsmanship.aspx&quot;&gt;another blog post&lt;/a&gt; which he proclaimed on Twitter as his &amp;quot;last word on the subject.&amp;quot;&lt;/p&gt;

&lt;p&gt;It was this last post that inspired me to post my own thoughts.  I&amp;#39;m not going to speak much about the drama itself, or the definition of Craftsmanship vs Laborer, follow the links above if you&amp;#39;re interested in that debate.&lt;/p&gt;

&lt;p&gt;Something in Neward&amp;#39;s final post struck me.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Know what? I think one thing that got lost somewhere in all this debate is that value is only value if it&amp;#39;s of value to the customer. And in a lot of the &amp;quot;craftsmanship&amp;quot; debates, I don&amp;#39;t hear the customer&amp;#39;s voice being brought up all that much.&lt;/p&gt;

&lt;p&gt;You remember all those crappy VB apps that Bob maligned earlier? Was the customer happy? Did anybody stop to ask them? Or was the assumption that, since the code was crappy, the customer implicitly must be unhappy as well? Don&amp;#39;t get me wrong, there&amp;#39;s a lot of crappy code out there that doesn&amp;#39;t make the customer happy. As a matter of fact, I&amp;#39;ll argue that any code that doesn&amp;#39;t make the customer happy is crap, regardless of what language it&amp;#39;s written in or what patterns it uses or how decoupled or injected or new databases it stores data into. Value isn&amp;#39;t value unless it&amp;#39;s value to the person who&amp;#39;s paying for the code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This, to me, is the heart of the Software Craftsmanship movement.  Neward intended this as a critique of Craftsmanship, but I see it as it&amp;#39;s greatest strength.&lt;/p&gt;

&lt;p&gt;I see the &lt;a href=&quot;http://agilemanifesto.org/&quot;&gt;Agile Manifesto&lt;/a&gt; as being customer-focused.  It&amp;#39;s values are interacting with people, collaborating with customers, releasing working software, and responding to change quickly.  These are things that customers have a good reason to care about.  I want every customer of mine to know that I consider myself an agile developer because I think that conveys to them a certain set of principles that they might value.  &lt;/p&gt;

&lt;p&gt;But Ted&amp;#39;s right, customers don&amp;#39;t care much about if code is crappy, and they don&amp;#39;t care if all of these craftspeople meet regularly after work to &amp;quot;hone their craft&amp;quot;.  These are, indeed, not of much concern to customers, at least not directly.  The Craftsmanship movement is for me, not about developers focusing on their customers, but about them also &lt;strong&gt;focusing on other developers&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I don&amp;#39;t write well-crafted code or go to meetup groups or steadily add value (even if it&amp;#39;s not requested) for the benefit of the customer.  I do it for the other developers I work with, and for those who maintain my code when I can&amp;#39;t.  It&amp;#39;s this additional layer, the &amp;quot;not-only&amp;quot;s of the Software Craftsmanship manifesto that appeal to me: the adoption of a view that we must not only make our customers happy, but make our fellow developers happy as well.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m signatory #214 of the Software Craftsmanship Manifesto, and my self-given title on LinkedIn is &amp;quot;Software Craftsman and Computer Science Geek&amp;quot;.  Every so often I see my own LinkedIn profile and this title strikes me as pretentious and annoying, and I consider changing it, but I never do.  I always decide it&amp;#39;s more important to leave it and risk looking like a bit of a pompous, self-important jerk.  Why do I do this?&lt;/p&gt;

&lt;p&gt;I do it because I consider it something of a pirate flag for other developers.  It&amp;#39;s important to me that they see this flag, because the label conveys, to my mind, a great deal of meaning to the reader.  It&amp;#39;s a shorthand, it lets other developers know an awful lot amount me with two short words, including that I might be a bit of a pompous, self-important jerk.  &lt;strong&gt;It tells other developers what they can expect of the quality of my work, and what I expect of theirs.&lt;/strong&gt;  It is a label that I adopt solely to aid communication between myself and other developers, not customers.&lt;/p&gt;

&lt;p&gt;Sure, I think hiring a team of Craftspeople will be beneficial for customers.  I think the codebase will be more easily adaptable to change, I think they&amp;#39;ll get more honest and accurate assessments of when work will be done, and I think they will generally have more positive interactions with their team.  But at the end of the day, this team of Craftspeople has chosen their outlook on software development not out of concern only for the customer, but also out of concern for each other.&lt;/p&gt;

&lt;p&gt;If Neward wants to sing the praises of his VB-slinging, cut-and-pasting Software Laborer, that&amp;#39;s fine.  Such a person may make customers very, very happy, and good for them.  But I know that it would make &lt;strong&gt;me&lt;/strong&gt; unhappy if I had to work in or maintain their code, just as I know it would make someone else unhappy were I to be a Software Laborer myself.  Frankly, I don&amp;#39;t have much interest in working with Software Laborers as Neward describes them, which is why I fly my Craftsmanship flag high.  Does this make me an elitist snob?  Yeah, a bit.  I&amp;#39;m not trying to be a dick about it, I just know I&amp;#39;d just come home frustrated and drained if I worked for 8 hours a day with a team of people who are just trying to sling enough code to make the customer happy and didn&amp;#39;t care about the codebase itself.  The mentality of &amp;quot;the customer is all that matters&amp;quot; is a fine stance to adopt, particularly from the perspective of the customer, but it&amp;#39;s no way to build a team of happy developers.&lt;/p&gt;

&lt;p&gt;-Rod Hilton, Software Craftsman Godammit.&lt;/p&gt;
</description>
				<pubDate>Sat, 02 Feb 2013 00:00:00 -0500</pubDate>
				<link>http://www.nomachetejuggling.com/2013/02/02/brief-thoughts-on-software-craftsmanship/</link>
				<guid isPermaLink="true">http://www.nomachetejuggling.com/2013/02/02/brief-thoughts-on-software-craftsmanship/</guid>
			</item>
		
			<item>
				<title>A Stroll Through the Complexity Zoo</title>
				<description>&lt;p&gt;This Fall, I took a course on Computational Complexity.  I&amp;#39;ve been exposed to complexity in Computer Science before, but as an undergrad it rarely went beyond discussing P, NP, and NP-Complete.  While I enjoyed the class a great deal, I was slightly disappointed that we mostly studied some of the space complexity classes like PSPACE as well as went much, much deeper in depth on P, NP, and NP-Complete, without covering many of the other complexity classes, of which there are lots.&lt;/p&gt;

&lt;p&gt;For a final paper, we had to pick a topic of our own choosing in Complexity Theory and research it on our own.  For my topic, I choose to explore a bunch of the other important classes in complexity theory.  I had never had any exposure to any of these classes before, so I really enjoyed this project, though I was unable to cover as many classes as I&amp;#39;d have liked, and none of them in as much depth as I was hoping.&lt;/p&gt;

&lt;table class='image alignright' width='306'&gt;&lt;tr&gt;&lt;td&gt;&lt;a href='http://jeremykun.wordpress.com/2012/02/29/other-complexity-classes/'&gt;&lt;img src=&quot;http://www.nomachetejuggling.com/assets/chp_venn_diagram-300x270.jpg&quot; width='300' height='270'/&gt;&lt;/a&gt;&lt;p class='caption'&gt;Complexity Classes, from Math ∩ Programming&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Nonetheless, I&amp;#39;m pretty happy with my paper, which provides an undergraduate-level explanation of 26 other complexity classes, based off &lt;a href=&quot;http://complexityzoo.uwaterloo.ca/Complexity_Zoo&quot;&gt;The Complexity Zoo&lt;/a&gt;, kept by MIT professor Scott Aaronson.  I tried to boil these classes down to the bare essentials and explain them with examples in plain english as much as I could.  The goal of the paper is to expose those new to Complexity Theory or early in their Computer Science careers to a handful of interesting classes and explain how they relate to each other, the more common classes, and of course the $$P =? NP$$ question.&lt;/p&gt;

&lt;p&gt;You can download the paper &lt;strong&gt;&lt;a href=&quot;http://www.nomachetejuggling.com/files/complexity_zoo.pdf&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Please note, this paper has not been peer-reviewed in any fashion.  It has not been (nor will it be) submitted to any academic journals, and it makes no novel contributions to the field.  It&amp;#39;s purely an overview of other classes, a literature review at best.  I post it here in case others might find it interesting or informative, but it is &lt;strong&gt;not to be cited&lt;/strong&gt;.  If you somehow find something valuable for your own research, I suggest you follow the citations in the paper and look up the references yourself, then use those as a source.&lt;/p&gt;

&lt;p&gt;I also cannot stress enough how incomplete this paper is.  It only covers 26 classes, leaving out over 450.  There is a great deal of information about these classes as well as those not covered, which I do not touch upon at all.  The paper is intended as an introduction to these complexity classes, so don&amp;#39;t be surprised if things are left out.  I tried my best to avoid errors, and I had a few corrections issued by my professor where my language was misleading (for example, claiming a problem was not in $$NP$$ when in fact it was simply not &lt;strong&gt;known&lt;/strong&gt; to be in $$NP$$), but if you find something confusing or surprising, I suggest using the references provided, as this paper may have some mistakes.  If you find any, feel free to leave a comment and I&amp;#39;ll correct them.&lt;/p&gt;
</description>
				<pubDate>Sat, 15 Dec 2012 00:00:00 -0500</pubDate>
				<link>http://www.nomachetejuggling.com/2012/12/15/a-stroll-through-the-complexity-zoo/</link>
				<guid isPermaLink="true">http://www.nomachetejuggling.com/2012/12/15/a-stroll-through-the-complexity-zoo/</guid>
			</item>
		
	</channel>
</rss>